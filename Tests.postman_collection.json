{
	"item": [
		{
			"name": "List eSIMs assigned",
			"item": [
				{
					"name": "List eSIMs assigned to you",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {",
									"    'type': 'object',",
									"    'properties': {",
									"        'esims': {",
									"            'type': 'array',",
									"            'items': [{",
									"                    'type': 'object',",
									"                    'properties': {",
									"                        'iccid': { 'type': 'string' },",
									"                        'customerRef': { 'type': 'string' },",
									"                        'lastAction': { 'type': 'string' },",
									"                        'actionDate': { 'type': 'string' },",
									"                        'physical': { 'type': 'boolean' },",
									"                        'assignedDate': { 'type': 'string' }",
									"                    },",
									"                    'required': [",
									"                        'iccid',",
									"                        'customerRef',",
									"                        'lastAction',",
									"                        'actionDate',",
									"                        'physical',",
									"                        'assignedDate'",
									"                    ]",
									"                }]",
									"        },",
									"        'pageCount': { 'type': 'integer' },",
									"        'pageSize': { 'type': 'integer' },",
									"        'rows': { 'type': 'integer' }",
									"    },",
									"    'required': [",
									"        'esims',",
									"        'pageCount',",
									"        'pageSize',",
									"        'rows'",
									"    ]",
									"};",
									"",
									"//Test to check status code",
									"pm.test('Response status code is 200', function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"//Test to check response format",
									"pm.test('Response contains valid JSON data', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"//Test to validate if iccids are 19 digit",
									"pm.test(\"Validate if iccid's contain 19 digits\", ()=>{",
									"    const response = pm.response.json();",
									"    let len = response.esims.length;",
									"    for (let i = 0; i < len; i++){",
									"      let iccidstr = response.esims[i].iccid.toString();",
									"      pm.collectionVariables.set(\"geticcid\"+i, response.esims[i].iccid);",
									"      let iccidlen = iccidstr.length;",
									"      pm.expect(iccidlen).to.equal(19||20);",
									"    }",
									"});",
									"",
									"//Test to validate if action date & assigned date are the expected format",
									"pm.test(\"Validate date format\", ()=>{",
									"    const response = pm.response.json();",
									"    let len = response.esims.length;",
									"    ",
									"    for (let i = 0; i < len; i++){",
									"       const userKeyRegExp = /^[0-9]{4}\\-[0-9]{2}\\-[0-9]{2}[T][0-9]{2}\\:[0-9]{2}\\:[0-9]{2}?$/;",
									"       let str1 = response.esims[i].actionDate.slice(0,19);",
									"       let valid1 = userKeyRegExp.test(str1);",
									"       console.log(str1);",
									"       pm.expect(valid1).to.be.true;",
									"       let str2 = response.esims[i].assignedDate.slice(0,19);",
									"       let valid2 = userKeyRegExp.test(str2);",
									"       console.log(str2);",
									"       pm.expect(valid2).to.be.true;",
									"    }",
									"});",
									"",
									"//Test to validate last action responses",
									"pm.test(\"Validate last action responses\", ()=>{",
									"    const response = pm.response.json();",
									"    let lastActionfield = [\"Bundle Applied\",\"Unsuccessful Bundle Revoke\",\"eSIM Refreshed\",\"Bundle Revoked\"]//Please updated if other actions are added",
									"    let len = response.esims.length;",
									"    for(let i=0;i < len; i++){",
									"        pm.expect(lastActionfield.includes(response.esims[i].lastAction)).to.be.true;",
									"    }",
									"});",
									"",
									"",
									"//Test to validate the physical sim response",
									"pm.test(\"Validate last action responses\", ()=>{",
									"    const response = pm.response.json();",
									"    let physical = [true,false]",
									"    let len = response.esims.length;",
									"    for(let i=0;i < len; i++){",
									"        pm.expect(physical.includes(response.esims[i].physical)).to.be.true;",
									"    }",
									"});",
									"",
									"",
									"//Test the length of response",
									"pm.test(\"Validate products is not empty\", ()=>{",
									"    const response = pm.response.json();",
									"    let products = response.esims;",
									"    let len = products.length;",
									"    pm.expect(len).to.not.eq(0);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/esims",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims"
							],
							"query": [
								{
									"key": "page",
									"value": "",
									"disabled": true
								},
								{
									"key": "perPage",
									"value": "",
									"disabled": true
								},
								{
									"key": "direction",
									"value": "",
									"disabled": true
								},
								{
									"key": "orderBy",
									"value": "",
									"disabled": true
								},
								{
									"key": "filterBy",
									"value": "",
									"disabled": true
								},
								{
									"key": "filter",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "This is an API call to get list of eSIMs assigned"
					},
					"response": []
				},
				{
					"name": "List eSIMs assigned to you",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is in JSON format\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response has esims array property\", function () {",
									"    pm.expect(pm.response.json()).to.have.property('esims').that.is.an('array');",
									"});",
									"",
									"pm.test(\"Response has pageCount, pageSize, and rows properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('pageCount');",
									"    pm.expect(jsonData).to.have.property('pageSize');",
									"    pm.expect(jsonData).to.have.property('rows');",
									"});",
									"",
									"//Test the length of response",
									"pm.test(\"Validate products is not empty\", ()=>{",
									"    const response = pm.response.json();",
									"    let products = response.esims;",
									"    let len = products.length;",
									"    pm.expect(len).to.not.eq(0);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/esims",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims"
							],
							"query": [
								{
									"key": "page",
									"value": "",
									"disabled": true
								},
								{
									"key": "perPage",
									"value": "",
									"disabled": true
								},
								{
									"key": "direction",
									"value": "",
									"disabled": true
								},
								{
									"key": "orderBy",
									"value": "",
									"disabled": true
								},
								{
									"key": "filterBy",
									"value": "",
									"disabled": true
								},
								{
									"key": "filter",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "This is an API call to get list of eSIMs assigned"
					},
					"response": []
				},
				{
					"name": "List eSIMs assigned to you - Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {",
									"    'type': 'object',",
									"    'properties': {",
									"        'esims': {",
									"            'type': 'array',",
									"            'items': [{",
									"                    'type': 'object',",
									"                    'properties': {",
									"                        'iccid': { 'type': 'string' },",
									"                        'customerRef': { 'type': 'string' },",
									"                        'lastAction': { 'type': 'string' },",
									"                        'actionDate': { 'type': 'string' },",
									"                        'physical': { 'type': 'boolean' },",
									"                        'assignedDate': { 'type': 'string' }",
									"                    },",
									"                    'required': [",
									"                        'iccid',",
									"                        'customerRef',",
									"                        'lastAction',",
									"                        'actionDate',",
									"                        'physical',",
									"                        'assignedDate'",
									"                    ]",
									"                }]",
									"        },",
									"        'pageCount': { 'type': 'integer' },",
									"        'pageSize': { 'type': 'integer' },",
									"        'rows': { 'type': 'integer' }",
									"    },",
									"    'required': [",
									"        'esims',",
									"        'pageCount',",
									"        'pageSize',",
									"        'rows'",
									"    ]",
									"};",
									"",
									"//Test to check status code",
									"pm.test('Response status code is 200', function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"//Test to check response format",
									"pm.test('Response contains valid JSON data', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"//Test to validate page",
									"pm.test(\"Validate page\", ()=>{",
									"    const response = pm.response.json();",
									"    let len = response.esims.length;",
									"    pm.expect(len).to.equal(0);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/esims?page={{page}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims"
							],
							"query": [
								{
									"key": "page",
									"value": "{{page}}"
								},
								{
									"key": "perPage",
									"value": "1",
									"disabled": true
								},
								{
									"key": "direction",
									"value": "",
									"disabled": true
								},
								{
									"key": "orderBy",
									"value": "",
									"disabled": true
								},
								{
									"key": "filterBy",
									"value": "",
									"disabled": true
								},
								{
									"key": "filter",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List eSIMs assigned to you - perPage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {",
									"    'type': 'object',",
									"    'properties': {",
									"        'esims': {",
									"            'type': 'array',",
									"            'items': [{",
									"                    'type': 'object',",
									"                    'properties': {",
									"                        'iccid': { 'type': 'string' },",
									"                        'customerRef': { 'type': 'string' },",
									"                        'lastAction': { 'type': 'string' },",
									"                        'actionDate': { 'type': 'string' },",
									"                        'physical': { 'type': 'boolean' },",
									"                        'assignedDate': { 'type': 'string' }",
									"                    },",
									"                    'required': [",
									"                        'iccid',",
									"                        'customerRef',",
									"                        'lastAction',",
									"                        'actionDate',",
									"                        'physical',",
									"                        'assignedDate'",
									"                    ]",
									"                }]",
									"        },",
									"        'pageCount': { 'type': 'integer' },",
									"        'pageSize': { 'type': 'integer' },",
									"        'rows': { 'type': 'integer' }",
									"    },",
									"    'required': [",
									"        'esims',",
									"        'pageCount',",
									"        'pageSize',",
									"        'rows'",
									"    ]",
									"};",
									"",
									"//Test to check status code",
									"pm.test('Response status code is 200', function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"//Test to check response format",
									"pm.test('Response contains valid JSON data', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"//Test to validate if iccids are 19 digit",
									"pm.test(\"Validate if iccid's contain 19 digits\", ()=>{",
									"    const response = pm.response.json();",
									"    let len = response.esims.length;",
									"    for (let i = 0; i < len; i++){",
									"      let iccidstr = response.esims[i].iccid.toString();",
									"      let iccidlen = iccidstr.length;",
									"      pm.expect(iccidlen).to.equal(19||20);",
									"    }",
									"});",
									"",
									"//Test to validate if action date & assigned date are the expected format",
									"pm.test(\"Validate date format\", ()=>{",
									"    const response = pm.response.json();",
									"    let len = response.esims.length;",
									"    ",
									"    for (let i = 0; i < len; i++){",
									"       const userKeyRegExp = /^[0-9]{4}\\-[0-9]{2}\\-[0-9]{2}[T][0-9]{2}\\:[0-9]{2}\\:[0-9]{2}?$/;",
									"       let str1 = response.esims[i].actionDate.slice(0,19);",
									"       let valid1 = userKeyRegExp.test(str1);",
									"       console.log(str1);",
									"       pm.expect(valid1).to.be.true;",
									"       let str2 = response.esims[i].assignedDate.slice(0,19);",
									"       let valid2 = userKeyRegExp.test(str2);",
									"       console.log(str2);",
									"       pm.expect(valid2).to.be.true;",
									"    }",
									"});",
									"",
									"//Test to validate last action responses",
									"pm.test(\"Validate last action responses\", ()=>{",
									"    const response = pm.response.json();",
									"    let lastActionfield = [\"Bundle Applied\",\"Unsuccessful Bundle Revoke\",\"eSIM Refreshed\",\"Bundle Revoked\"]//Please updated if other actions are added",
									"    let len = response.esims.length;",
									"    for(let i=0;i < len; i++){",
									"        pm.expect(lastActionfield.includes(response.esims[i].lastAction)).to.be.true;",
									"    }",
									"});",
									"",
									"",
									"//Test to validate the physical sim response",
									"pm.test(\"Validate last action responses\", ()=>{",
									"    const response = pm.response.json();",
									"    let physical = [true,false]",
									"    let len = response.esims.length;",
									"    for(let i=0;i < len; i++){",
									"        pm.expect(physical.includes(response.esims[i].physical)).to.be.true;",
									"    }",
									"});",
									"",
									"//Test to check the perPage items displayed",
									"pm.test(\"Validate perPage is as expected\", ()=>{",
									"    const response = pm.response.json();",
									"    let str1 = pm.collectionVariables.get(\"perPage\");",
									"    let str2 = (response.esims.length);",
									"    let str3 = ''+str2+'';",
									"    pm.expect(str3).to.eql(str1);",
									"});",
									"",
									"//Test the length of response",
									"pm.test(\"Validate products is not empty\", ()=>{",
									"    const response = pm.response.json();",
									"    let products = response.esims;",
									"    let len = products.length;",
									"    pm.expect(len).to.not.eq(0);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/esims?perPage={{perPage}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims"
							],
							"query": [
								{
									"key": "page",
									"value": "",
									"disabled": true
								},
								{
									"key": "perPage",
									"value": "{{perPage}}"
								},
								{
									"key": "direction",
									"value": "",
									"disabled": true
								},
								{
									"key": "orderBy",
									"value": "",
									"disabled": true
								},
								{
									"key": "filterBy",
									"value": "",
									"disabled": true
								},
								{
									"key": "filter",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List eSIMs assigned to you - order by iccid asc",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {",
									"    'type': 'object',",
									"    'properties': {",
									"        'esims': {",
									"            'type': 'array',",
									"            'items': [{",
									"                    'type': 'object',",
									"                    'properties': {",
									"                        'iccid': { 'type': 'string' },",
									"                        'customerRef': { 'type': 'string' },",
									"                        'lastAction': { 'type': 'string' },",
									"                        'actionDate': { 'type': 'string' },",
									"                        'physical': { 'type': 'boolean' },",
									"                        'assignedDate': { 'type': 'string' }",
									"                    },",
									"                    'required': [",
									"                        'iccid',",
									"                        'customerRef',",
									"                        'lastAction',",
									"                        'actionDate',",
									"                        'physical',",
									"                        'assignedDate'",
									"                    ]",
									"                }]",
									"        },",
									"        'pageCount': { 'type': 'integer' },",
									"        'pageSize': { 'type': 'integer' },",
									"        'rows': { 'type': 'integer' }",
									"    },",
									"    'required': [",
									"        'esims',",
									"        'pageCount',",
									"        'pageSize',",
									"        'rows'",
									"    ]",
									"};",
									"",
									"//Test to check status code",
									"pm.test('Response status code is 200', function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"//Test to check response format",
									"pm.test('Response contains valid JSON data', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"//Test to validate if iccids are 19 digit",
									"pm.test(\"Validate if iccid's contain 19 digits\", ()=>{",
									"    const response = pm.response.json();",
									"    let len = response.esims.length;",
									"    for (let i = 0; i < len; i++){",
									"      let iccidstr = response.esims[i].iccid.toString();",
									"      let iccidlen = iccidstr.length;",
									"      pm.expect(iccidlen).to.equal(19||20);",
									"    }",
									"});",
									"",
									"//Test to validate if action date & assigned date are the expected format",
									"pm.test(\"Validate date format\", ()=>{",
									"    const response = pm.response.json();",
									"    let len = response.esims.length;",
									"    ",
									"    for (let i = 0; i < len; i++){",
									"       const userKeyRegExp = /^[0-9]{4}\\-[0-9]{2}\\-[0-9]{2}[T][0-9]{2}\\:[0-9]{2}\\:[0-9]{2}?$/;",
									"       let str1 = response.esims[i].actionDate.slice(0,19);",
									"       let valid1 = userKeyRegExp.test(str1);",
									"       console.log(str1);",
									"       pm.expect(valid1).to.be.true;",
									"       let str2 = response.esims[i].assignedDate.slice(0,19);",
									"       let valid2 = userKeyRegExp.test(str2);",
									"       console.log(str2);",
									"       pm.expect(valid2).to.be.true;",
									"    }",
									"});",
									"",
									"//Test to validate last action responses",
									"pm.test(\"Validate last action responses\", ()=>{",
									"    const response = pm.response.json();",
									"    let lastActionfield = [\"Bundle Applied\",\"Unsuccessful Bundle Revoke\",\"eSIM Refreshed\",\"Bundle Revoked\"]//Please updated if other actions are added",
									"    let len = response.esims.length;",
									"    for(let i=0;i < len; i++){",
									"        pm.expect(lastActionfield.includes(response.esims[i].lastAction)).to.be.true;",
									"    }",
									"});",
									"",
									"",
									"//Test to validate the physical sim response",
									"pm.test(\"Validate last action responses\", ()=>{",
									"    const response = pm.response.json();",
									"    let physical = [true,false]",
									"    let len = response.esims.length;",
									"    for(let i=0;i < len; i++){",
									"        pm.expect(physical.includes(response.esims[i].physical)).to.be.true;",
									"    }",
									"});",
									"",
									"",
									"//Test to check if ascending works",
									"pm.test(\"Validate if iccid's contain 19 digits\", ()=>{",
									"    const response = pm.response.json();",
									"    let len = response.esims.length;",
									"    let iccidarr = [];",
									"    let ascarr = [];",
									"    for (let i = 0; i < len; i++){",
									"      let iccidstr = response.esims[i].iccid.toString();",
									"      iccidarr.push(pm.collectionVariables.get(\"geticcid\"+i));",
									"      ascarr.push(iccidstr);",
									"    }",
									"",
									"    ascarr = ascarr.sort();",
									"    pm.expect(ascarr).to.eql(iccidarr);",
									"",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/esims?direction=asc&orderBy=iccid",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims"
							],
							"query": [
								{
									"key": "page",
									"value": "",
									"disabled": true
								},
								{
									"key": "perPage",
									"value": "",
									"disabled": true
								},
								{
									"key": "direction",
									"value": "asc"
								},
								{
									"key": "orderBy",
									"value": "iccid"
								},
								{
									"key": "filterBy",
									"value": "",
									"disabled": true
								},
								{
									"key": "filter",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List eSIMs assigned to you - order by iccid desc",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {",
									"    'type': 'object',",
									"    'properties': {",
									"        'esims': {",
									"            'type': 'array',",
									"            'items': [{",
									"                    'type': 'object',",
									"                    'properties': {",
									"                        'iccid': { 'type': 'string' },",
									"                        'customerRef': { 'type': 'string' },",
									"                        'lastAction': { 'type': 'string' },",
									"                        'actionDate': { 'type': 'string' },",
									"                        'physical': { 'type': 'boolean' },",
									"                        'assignedDate': { 'type': 'string' }",
									"                    },",
									"                    'required': [",
									"                        'iccid',",
									"                        'customerRef',",
									"                        'lastAction',",
									"                        'actionDate',",
									"                        'physical',",
									"                        'assignedDate'",
									"                    ]",
									"                }]",
									"        },",
									"        'pageCount': { 'type': 'integer' },",
									"        'pageSize': { 'type': 'integer' },",
									"        'rows': { 'type': 'integer' }",
									"    },",
									"    'required': [",
									"        'esims',",
									"        'pageCount',",
									"        'pageSize',",
									"        'rows'",
									"    ]",
									"};",
									"",
									"//Test to check status code",
									"pm.test('Response status code is 200', function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"//Test to check response format",
									"pm.test('Response contains valid JSON data', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"//Test to validate if iccids are 19 digit",
									"pm.test(\"Validate if iccid's contain 19 digits\", ()=>{",
									"    const response = pm.response.json();",
									"    let len = response.esims.length;",
									"    for (let i = 0; i < len; i++){",
									"      let iccidstr = response.esims[i].iccid.toString();",
									"      let iccidlen = iccidstr.length;",
									"      pm.expect(iccidlen).to.equal(19||20);",
									"    }",
									"});",
									"",
									"//Test to validate if action date & assigned date are the expected format",
									"pm.test(\"Validate date format\", ()=>{",
									"    const response = pm.response.json();",
									"    let len = response.esims.length;",
									"    ",
									"    for (let i = 0; i < len; i++){",
									"       const userKeyRegExp = /^[0-9]{4}\\-[0-9]{2}\\-[0-9]{2}[T][0-9]{2}\\:[0-9]{2}\\:[0-9]{2}?$/;",
									"       let str1 = response.esims[i].actionDate.slice(0,19);",
									"       let valid1 = userKeyRegExp.test(str1);",
									"       console.log(str1);",
									"       pm.expect(valid1).to.be.true;",
									"       let str2 = response.esims[i].assignedDate.slice(0,19);",
									"       let valid2 = userKeyRegExp.test(str2);",
									"       console.log(str2);",
									"       pm.expect(valid2).to.be.true;",
									"    }",
									"});",
									"",
									"//Test to validate last action responses",
									"pm.test(\"Validate last action responses\", ()=>{",
									"    const response = pm.response.json();",
									"    let lastActionfield = [\"Bundle Applied\",\"Unsuccessful Bundle Revoke\",\"eSIM Refreshed\",\"Bundle Revoked\"]//Please updated if other actions are added",
									"    let len = response.esims.length;",
									"    for(let i=0;i < len; i++){",
									"        pm.expect(lastActionfield.includes(response.esims[i].lastAction)).to.be.true;",
									"    }",
									"});",
									"",
									"",
									"//Test to validate the physical sim response",
									"pm.test(\"Validate last action responses\", ()=>{",
									"    const response = pm.response.json();",
									"    let physical = [true,false]",
									"    let len = response.esims.length;",
									"    for(let i=0;i < len; i++){",
									"        pm.expect(physical.includes(response.esims[i].physical)).to.be.true;",
									"    }",
									"});",
									"",
									"//Test if the response is in descending",
									"pm.test(\"Response message is in descending\", ()=>{",
									"    const iccidarr = [];",
									"    pm.response.json().esims.forEach(x => {",
									"       iccidarr.push(x.lastAction);",
									"    });",
									"    let sorting = Array.from(iccidarr.sort());",
									"    let rsorting = Array.from(sorting.reverse());",
									"",
									"    console.log(sorting);",
									"    console.log(rsorting);",
									"",
									"    pm.expect(sorting).to.eql(iccidarr);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/esims?direction=desc&orderBy=iccid",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims"
							],
							"query": [
								{
									"key": "page",
									"value": "",
									"disabled": true
								},
								{
									"key": "perPage",
									"value": "",
									"disabled": true
								},
								{
									"key": "direction",
									"value": "desc"
								},
								{
									"key": "orderBy",
									"value": "iccid"
								},
								{
									"key": "filterBy",
									"value": "",
									"disabled": true
								},
								{
									"key": "filter",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List eSIMs assigned to you - order by iccid asc Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {",
									"    'type': 'object',",
									"    'properties': {",
									"        'esims': {",
									"            'type': 'array',",
									"            'items': [{",
									"                    'type': 'object',",
									"                    'properties': {",
									"                        'iccid': { 'type': 'string' },",
									"                        'customerRef': { 'type': 'string' },",
									"                        'lastAction': { 'type': 'string' },",
									"                        'actionDate': { 'type': 'string' },",
									"                        'physical': { 'type': 'boolean' },",
									"                        'assignedDate': { 'type': 'string' }",
									"                    },",
									"                    'required': [",
									"                        'iccid',",
									"                        'customerRef',",
									"                        'lastAction',",
									"                        'actionDate',",
									"                        'physical',",
									"                        'assignedDate'",
									"                    ]",
									"                }]",
									"        },",
									"        'pageCount': { 'type': 'integer' },",
									"        'pageSize': { 'type': 'integer' },",
									"        'rows': { 'type': 'integer' }",
									"    },",
									"    'required': [",
									"        'esims',",
									"        'pageCount',",
									"        'pageSize',",
									"        'rows'",
									"    ]",
									"};",
									"",
									"//Test to check status code",
									"pm.test('Response status code is 200', function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"//Test to check response format",
									"pm.test('Response contains valid JSON data', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"//Test to validate if iccids are 19 digit",
									"pm.test(\"Validate if iccid's contain 19 digits\", ()=>{",
									"    const response = pm.response.json();",
									"    let len = response.esims.length;",
									"    for (let i = 0; i < len; i++){",
									"      let iccidstr = response.esims[i].iccid.toString();",
									"      let iccidlen = iccidstr.length;",
									"      pm.expect(iccidlen).to.equal(19||20);",
									"    }",
									"});",
									"",
									"//Test to validate if action date & assigned date are the expected format",
									"pm.test(\"Validate date format\", ()=>{",
									"    const response = pm.response.json();",
									"    let len = response.esims.length;",
									"    ",
									"    for (let i = 0; i < len; i++){",
									"       const userKeyRegExp = /^[0-9]{4}\\-[0-9]{2}\\-[0-9]{2}[T][0-9]{2}\\:[0-9]{2}\\:[0-9]{2}?$/;",
									"       let str1 = response.esims[i].actionDate.slice(0,19);",
									"       let valid1 = userKeyRegExp.test(str1);",
									"       console.log(str1);",
									"       pm.expect(valid1).to.be.true;",
									"       let str2 = response.esims[i].assignedDate.slice(0,19);",
									"       let valid2 = userKeyRegExp.test(str2);",
									"       console.log(str2);",
									"       pm.expect(valid2).to.be.true;",
									"    }",
									"});",
									"",
									"//Test to validate last action responses",
									"pm.test(\"Validate last action responses\", ()=>{",
									"    const response = pm.response.json();",
									"    let lastActionfield = [\"Bundle Applied\",\"Unsuccessful Bundle Revoke\",\"eSIM Refreshed\",\"Bundle Revoked\"]//Please updated if other actions are added",
									"    let len = response.esims.length;",
									"    for(let i=0;i < len; i++){",
									"        pm.expect(lastActionfield.includes(response.esims[i].lastAction)).to.be.true;",
									"    }",
									"});",
									"",
									"",
									"//Test to validate the physical sim response",
									"pm.test(\"Validate last action responses\", ()=>{",
									"    const response = pm.response.json();",
									"    let physical = [true,false]",
									"    let len = response.esims.length;",
									"    for(let i=0;i < len; i++){",
									"        pm.expect(physical.includes(response.esims[i].physical)).to.be.true;",
									"    }",
									"});",
									"",
									"",
									"//Test to check if ascending works",
									"pm.test(\"Validate if iccid's contain 19 digits\", ()=>{",
									"    const response = pm.response.json();",
									"    let len = response.esims.length;",
									"    let iccidarr = [];",
									"    let ascarr = [];",
									"    for (let i = 0; i < len; i++){",
									"      let iccidstr = response.esims[i].iccid.toString();",
									"      iccidarr.push(pm.collectionVariables.get(\"geticcid\"+i));",
									"      ascarr.push(iccidstr);",
									"    }",
									"",
									"    ascarr = ascarr.reverse();",
									"    pm.expect(ascarr).to.eql(iccidarr);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/esims?direction=desc&orderBy=iccid",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims"
							],
							"query": [
								{
									"key": "page",
									"value": "",
									"disabled": true
								},
								{
									"key": "perPage",
									"value": "",
									"disabled": true
								},
								{
									"key": "direction",
									"value": "desc"
								},
								{
									"key": "orderBy",
									"value": "iccid"
								},
								{
									"key": "filterBy",
									"value": "",
									"disabled": true
								},
								{
									"key": "filter",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List eSIMs assigned to you (Fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Check status is 403",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"//Check response body for decline",
									"pm.test(\"Response Body is correct\", function () {",
									"    pm.response.to.have.body(\"{\\\"message\\\":\\\"access denied\\\"}\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY-FAIL}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/esims",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims"
							],
							"query": [
								{
									"key": "page(string)",
									"value": "",
									"disabled": true
								},
								{
									"key": "perPage(integer)",
									"value": "",
									"disabled": true
								},
								{
									"key": "direction(asc/desc)",
									"value": "",
									"disabled": true
								},
								{
									"key": "orderBy(iccid)",
									"value": "",
									"disabled": true
								},
								{
									"key": "filterBy(iccid,customerRef,lastAction,actionDate,assignedDate)",
									"value": "",
									"disabled": true
								},
								{
									"key": "filter(string)",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get data containing eSIMs from multiple orders",
			"item": [
				{
					"name": "Get data containing eSIMs from multiple orders or Bundle assignments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {",
									"    'properties': {",
									"        'iccid': { 'type': 'string' },",
									"        'matchingId': { 'type': 'string' },",
									"        'rspUrl': { 'type': 'string' },",
									"        'bundle': { 'type': 'string' },",
									"        'reference': { 'type': 'string' }",
									"    },",
									"    'required': [",
									"        'iccid',",
									"        'matchingId',",
									"        'rspUrl',",
									"        'bundle',",
									"        'reference'",
									"    ]",
									"};",
									"",
									"//Test to check response code",
									"pm.test('Response status code is 200', function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"})",
									"",
									"//Test to check valid JSON data",
									"pm.test('Response contains valid JSON data', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"})",
									"",
									"//Valid digits in iccid",
									"pm.test(\"Validate if iccid's contain 19 digits\", ()=>{",
									"    const response = pm.response.json();",
									"    let len = response.length;",
									"    for (let i = 0; i < len; i++){",
									"      let iccidstr = response[i].iccid.toString(); ",
									"      let iccidlen = iccidstr.length;",
									"      pm.expect(iccidlen).to.equal(19);",
									"    }",
									"});",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"description": "Header to control the output format",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BaseURL}}/esims/assignments?reference={{reference}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims",
								"assignments"
							],
							"query": [
								{
									"key": "reference",
									"value": "{{reference}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get data containing eSIMs from multiple orders or Bundle assignments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {",
									"    'properties': {",
									"        'iccid': { 'type': 'string' },",
									"        'matchingId': { 'type': 'string' },",
									"        'rspUrl': { 'type': 'string' },",
									"        'bundle': { 'type': 'string' },",
									"        'reference': { 'type': 'string' },",
									"        'appleInstallUrl': { 'type': 'string' }",
									"    },",
									"    'required': [",
									"        'iccid',",
									"        'matchingId',",
									"        'rspUrl',",
									"        'bundle',",
									"        'reference',",
									"        'appleInstallUrl'",
									"    ]",
									"};",
									"",
									"//Test to check response code",
									"pm.test('Response status code is 200', function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"})",
									"",
									"//Test to check valid JSON data",
									"pm.test('Response contains valid JSON data', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"})",
									"",
									"//Valid digits in iccid",
									"pm.test(\"Validate if iccid's contain 19 digits\", ()=>{",
									"    const response = pm.response.json();",
									"    let len = response.length;",
									"    for (let i = 0; i < len; i++){",
									"      let iccidstr = response[i].iccid.toString(); ",
									"      let iccidlen = iccidstr.length;",
									"      pm.expect(iccidlen).to.equal(19);",
									"    }",
									"});",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"description": "Header to control the output format",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BaseURL}}/esims/assignments?reference={{reference-apple}}&additionalFields=appleInstallUrl",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims",
								"assignments"
							],
							"query": [
								{
									"key": "reference",
									"value": "{{reference-apple}}"
								},
								{
									"key": "additionalFields",
									"value": "appleInstallUrl"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get data containing eSIMs from multiple orders or Bundle assignments (Fail - 1) - invalid reference",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Check status is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Check response body to be empty",
									"pm.test(\"Response Body is correct\", function () {",
									"    pm.response.to.have.body(\"[]\\n\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"description": "Header to set output format",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BaseURL}}/esims/assignments?reference=random",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims",
								"assignments"
							],
							"query": [
								{
									"key": "reference",
									"value": "random"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get data containing eSIMs from multiple orders or Bundle assignments (Fail - 2) no reference",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Check status is 400",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"//Check response body for pre-set message",
									"pm.test(\"Response body is correct\", function () {",
									"    pm.response.to.have.body(\"{\\\"message\\\":\\\"Missing reference\\\"}\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"description": "Header to control output format",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BaseURL}}/esims/assignments?reference=",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims",
								"assignments"
							],
							"query": [
								{
									"key": "reference",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get data containing eSIMs from multiple orders or Bundle assignments (Fail - 3) wrong API key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Check status is 403",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"//Check response body for pre-set message",
									"pm.test(\"Response body is correct\", function () {",
									"    pm.response.to.have.body(\"{\\\"message\\\":\\\"access denied\\\"}\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY-FAIL}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"description": "Header to control output format",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BaseURL}}/esims/assignments?reference=",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims",
								"assignments"
							],
							"query": [
								{
									"key": "reference",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "List Bundles Applied to eSIM",
			"item": [
				{
					"name": "List Bundles applied to an eSIM",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"bundles\": {",
									"      \"type\": \"array\",",
									"      \"items\": [",
									"        {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"name\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"description\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"assignments\": {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"id\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"callTypeGroup\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"initialQuantity\": {",
									"                      \"type\": \"integer\"",
									"                    },",
									"                    \"remainingQuantity\": {",
									"                      \"type\": \"integer\"",
									"                    },",
									"                    \"assignmentDateTime\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"assignmentReference\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"bundleState\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"id\",",
									"                    \"callTypeGroup\",",
									"                    \"initialQuantity\",",
									"                    \"remainingQuantity\",",
									"                    \"assignmentDateTime\",",
									"                    \"assignmentReference\",",
									"                    \"bundleState\"",
									"                  ]",
									"                }",
									"              ]",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"name\",",
									"            \"description\",",
									"            \"assignments\"",
									"          ]",
									"        }",
									"      ]",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"bundles\"",
									"  ]",
									"}",
									"",
									"//Test to check response of endpoint",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"//Test to check the format of JSON data is as expected",
									"pm.test(\"Response contains valid JSON data\", ()=>{",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"//Test date & time",
									"pm.test(\"Validate date format\", ()=>{",
									"    const response = pm.response.json();",
									"    let len = response.bundles.length;",
									"    ",
									"    for (let i = 0; i < len; i++){",
									"       const userKeyRegExp = /^[0-9]{4}\\-[0-9]{2}\\-[0-9]{2}[T][0-9]{2}\\:[0-9]{2}\\:[0-9]{2}?$/;",
									"       let str1 = response.bundles[0].assignments[i].assignmentDateTime;",
									"       console.log(str1);",
									"       let str = str1.slice(0,19);",
									"       let valid1 = userKeyRegExp.test(str);",
									"       console.log(str);",
									"       pm.expect(valid1).to.be.true;",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/esims/{{geticcid0}}/bundles",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims",
								"{{geticcid0}}",
								"bundles"
							],
							"query": [
								{
									"key": "includeUsed",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List Bundles applied to an eSIM",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an object with bundles property\", function () {",
									"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('bundles');",
									"});",
									"",
									"pm.test(\"Each element in the bundles array has name, description, and assignments properties\", function () {",
									"    pm.response.json().bundles.forEach(function(bundle) {",
									"        pm.expect(bundle).to.have.property('name');",
									"        pm.expect(bundle).to.have.property('description');",
									"        pm.expect(bundle).to.have.property('assignments');",
									"    });",
									"});",
									"",
									"pm.test(\"Each element in the assignments array has id, callTypeGroup, initialQuantity, remainingQuantity, assignmentDateTime, assignmentReference, bundleState, and unlimited properties\", function () {",
									"    pm.response.json().bundles.forEach(function(bundle) {",
									"        bundle.assignments.forEach(function(assignment) {",
									"            pm.expect(assignment).to.have.property('id');",
									"            pm.expect(assignment).to.have.property('callTypeGroup');",
									"            pm.expect(assignment).to.have.property('initialQuantity');",
									"            pm.expect(assignment).to.have.property('remainingQuantity');",
									"            pm.expect(assignment).to.have.property('assignmentDateTime');",
									"            pm.expect(assignment).to.have.property('assignmentReference');",
									"            pm.expect(assignment).to.have.property('bundleState');",
									"            pm.expect(assignment).to.have.property('unlimited');",
									"        });",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/esims/{{geticcid0}}/bundles",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims",
								"{{geticcid0}}",
								"bundles"
							],
							"query": [
								{
									"key": "includeUsed",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List Bundles applied to an eSIM",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"bundles\": {",
									"      \"type\": \"array\",",
									"      \"items\": [",
									"        {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"name\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"description\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"assignments\": {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"id\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"callTypeGroup\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"initialQuantity\": {",
									"                      \"type\": \"integer\"",
									"                    },",
									"                    \"remainingQuantity\": {",
									"                      \"type\": \"integer\"",
									"                    },",
									"                    \"assignmentDateTime\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"assignmentReference\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"bundleState\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"id\",",
									"                    \"callTypeGroup\",",
									"                    \"initialQuantity\",",
									"                    \"remainingQuantity\",",
									"                    \"assignmentDateTime\",",
									"                    \"assignmentReference\",",
									"                    \"bundleState\"",
									"                  ]",
									"                }",
									"              ]",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"name\",",
									"            \"description\",",
									"            \"assignments\"",
									"          ]",
									"        }",
									"      ]",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"bundles\"",
									"  ]",
									"}",
									"",
									"//Test to check response of endpoint",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"//Test to check the format of JSON data is as expected",
									"pm.test(\"Response contains valid JSON data\", ()=>{",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"//Test date & time",
									"pm.test(\"Validate date format\", ()=>{",
									"    const response = pm.response.json();",
									"    let len = response.bundles.length;",
									"    ",
									"    for (let i = 0; i < len; i++){",
									"       const userKeyRegExp = /^[0-9]{4}\\-[0-9]{2}\\-[0-9]{2}[T][0-9]{2}\\:[0-9]{2}\\:[0-9]{2}?$/;",
									"       let str1 = response.bundles[0].assignments[i].assignmentDateTime;",
									"       console.log(str1);",
									"       let str = str1.slice(0,19);",
									"       let valid1 = userKeyRegExp.test(str);",
									"       console.log(str);",
									"       pm.expect(valid1).to.be.true;",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/esims/{{geticcid1}}/bundles",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims",
								"{{geticcid1}}",
								"bundles"
							],
							"query": [
								{
									"key": "includeUsed",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List Bundles applied to an eSIM",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"bundles\": {",
									"      \"type\": \"array\",",
									"      \"items\": [",
									"        {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"name\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"description\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"assignments\": {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"id\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"callTypeGroup\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"initialQuantity\": {",
									"                      \"type\": \"integer\"",
									"                    },",
									"                    \"remainingQuantity\": {",
									"                      \"type\": \"integer\"",
									"                    },",
									"                    \"assignmentDateTime\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"assignmentReference\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"bundleState\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"id\",",
									"                    \"callTypeGroup\",",
									"                    \"initialQuantity\",",
									"                    \"remainingQuantity\",",
									"                    \"assignmentDateTime\",",
									"                    \"assignmentReference\",",
									"                    \"bundleState\"",
									"                  ]",
									"                }",
									"              ]",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"name\",",
									"            \"description\",",
									"            \"assignments\"",
									"          ]",
									"        }",
									"      ]",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"bundles\"",
									"  ]",
									"}",
									"",
									"//Test to check response of endpoint",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"//Test to check the format of JSON data is as expected",
									"pm.test(\"Response contains valid JSON data\", ()=>{",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"//Test date & time",
									"pm.test(\"Validate date format\", ()=>{",
									"    const response = pm.response.json();",
									"    let len = response.bundles.length;",
									"    ",
									"    for (let i = 0; i < len; i++){",
									"       const userKeyRegExp = /^[0-9]{4}\\-[0-9]{2}\\-[0-9]{2}[T][0-9]{2}\\:[0-9]{2}\\:[0-9]{2}?$/;",
									"       let str1 = response.bundles[0].assignments[i].assignmentDateTime;",
									"       console.log(str1);",
									"       let str = str1.slice(0,19);",
									"       let valid1 = userKeyRegExp.test(str);",
									"       console.log(str);",
									"       pm.expect(valid1).to.be.true;",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/esims/{{geticcid2}}/bundles",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims",
								"{{geticcid2}}",
								"bundles"
							],
							"query": [
								{
									"key": "includeUsed",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List Bundles applied to an eSIM",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"bundles\": {",
									"      \"type\": \"array\",",
									"      \"items\": [",
									"        {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"name\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"description\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"assignments\": {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"id\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"callTypeGroup\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"initialQuantity\": {",
									"                      \"type\": \"integer\"",
									"                    },",
									"                    \"remainingQuantity\": {",
									"                      \"type\": \"integer\"",
									"                    },",
									"                    \"assignmentDateTime\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"assignmentReference\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"bundleState\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"id\",",
									"                    \"callTypeGroup\",",
									"                    \"initialQuantity\",",
									"                    \"remainingQuantity\",",
									"                    \"assignmentDateTime\",",
									"                    \"assignmentReference\",",
									"                    \"bundleState\"",
									"                  ]",
									"                }",
									"              ]",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"name\",",
									"            \"description\",",
									"            \"assignments\"",
									"          ]",
									"        }",
									"      ]",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"bundles\"",
									"  ]",
									"}",
									"",
									"//Test to check response of endpoint",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"//Test to check the format of JSON data is as expected",
									"pm.test(\"Response contains valid JSON data\", ()=>{",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"//Test date & time",
									"pm.test(\"Validate date format\", ()=>{",
									"    const response = pm.response.json();",
									"    let len = response.bundles.length;",
									"    ",
									"    for (let i = 0; i < len; i++){",
									"       const userKeyRegExp = /^[0-9]{4}\\-[0-9]{2}\\-[0-9]{2}[T][0-9]{2}\\:[0-9]{2}\\:[0-9]{2}?$/;",
									"       let str1 = response.bundles[0].assignments[i].assignmentDateTime;",
									"       console.log(str1);",
									"       let str = str1.slice(0,19);",
									"       let valid1 = userKeyRegExp.test(str);",
									"       console.log(str);",
									"       pm.expect(valid1).to.be.true;",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/esims/{{geticcid3}}/bundles",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims",
								"{{geticcid3}}",
								"bundles"
							],
							"query": [
								{
									"key": "includeUsed",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List Bundles applied to an eSIM",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"bundles\": {",
									"      \"type\": \"array\",",
									"      \"items\": [",
									"        {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"name\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"description\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"assignments\": {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"id\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"callTypeGroup\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"initialQuantity\": {",
									"                      \"type\": \"integer\"",
									"                    },",
									"                    \"remainingQuantity\": {",
									"                      \"type\": \"integer\"",
									"                    },",
									"                    \"assignmentDateTime\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"assignmentReference\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"bundleState\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"id\",",
									"                    \"callTypeGroup\",",
									"                    \"initialQuantity\",",
									"                    \"remainingQuantity\",",
									"                    \"assignmentDateTime\",",
									"                    \"assignmentReference\",",
									"                    \"bundleState\"",
									"                  ]",
									"                }",
									"              ]",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"name\",",
									"            \"description\",",
									"            \"assignments\"",
									"          ]",
									"        }",
									"      ]",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"bundles\"",
									"  ]",
									"}",
									"",
									"//Test to check response of endpoint",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"//Test to check the format of JSON data is as expected",
									"pm.test(\"Response contains valid JSON data\", ()=>{",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"//Test date & time",
									"pm.test(\"Validate date format\", ()=>{",
									"    const response = pm.response.json();",
									"    let len = response.bundles.length;",
									"    ",
									"    for (let i = 0; i < len; i++){",
									"       const userKeyRegExp = /^[0-9]{4}\\-[0-9]{2}\\-[0-9]{2}[T][0-9]{2}\\:[0-9]{2}\\:[0-9]{2}?$/;",
									"       let str1 = response.bundles[0].assignments[i].assignmentDateTime;",
									"       console.log(str1);",
									"       let str = str1.slice(0,19);",
									"       let valid1 = userKeyRegExp.test(str);",
									"       console.log(str);",
									"       pm.expect(valid1).to.be.true;",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/esims/{{geticcid4}}/bundles",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims",
								"{{geticcid4}}",
								"bundles"
							],
							"query": [
								{
									"key": "includeUsed",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List Bundles applied to an eSIM (Fail - Invalid iccid)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Check status is 403",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"//Check response body message",
									"pm.test(\"Response Body is correct\", function () {",
									"    pm.response.to.have.body(\"{\\\"message\\\":\\\"Access denied\\\"}\");",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/esims/{{iccid-na}}/bundles",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims",
								"{{iccid-na}}",
								"bundles"
							],
							"query": [
								{
									"key": "includeUsed",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List Bundles applied to an eSIM (Fail - invalid API Key)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Check status is 403",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"//Check response body for pre-set message",
									"pm.test(\"Response body is correct\", function () {",
									"    pm.response.to.have.body(\"{\\\"message\\\":\\\"access denied\\\"}\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY-FAIL}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/esims/{{geticcid1}}/bundles",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims",
								"{{geticcid1}}",
								"bundles"
							],
							"query": [
								{
									"key": "includeUsed",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "List SIM details and status",
			"item": [
				{
					"name": "Get eSIM details and status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {",
									"  'type': 'object',",
									"  'properties': {",
									"      'iccid': { 'type': 'string' },",
									"      'pin': { 'type': 'string' },",
									"      'puk': { 'type': 'string' },",
									"      'matchingId': { 'type': 'string' },",
									"      'smdpAddress': { 'type': 'string' },",
									"      'profileStatus': { 'type': 'string' },",
									"      'firstInstalledDateTime': { 'type': 'integer' },",
									"      'customerRef': { 'type': 'string' }",
									"  },",
									"  'required': [",
									"      'iccid',",
									"      'pin',",
									"      'puk',",
									"      'matchingId',",
									"      'smdpAddress',",
									"      'profileStatus',",
									"      'firstInstalledDateTime',",
									"      'customerRef'",
									"  ]",
									"};",
									"",
									"",
									"//Test to check status",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"//Test to check JSON data format",
									"pm.test(\"Response contains valid JSON data\", ()=>{",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"//Valid digits in iccid",
									"pm.test(\"Validate if iccid's contain 19 digits\", ()=>{",
									"    const response = pm.response.json();",
									"    let len = response.length;",
									"    for (let i = 0; i < len; i++){",
									"      let iccidstr = response[i].iccid.toString(); ",
									"      let iccidlen = iccidstr.length;",
									"      pm.expect(iccidlen).to.equal(19);",
									"    }",
									"});",
									"",
									"//Valid digits in pin",
									"pm.test(\"Validate pin format\", ()=>{",
									"    const response = pm.response.json();",
									"    let len = response.length;",
									"    for (let i = 0; i < len; i++){",
									"      let pinstr = response[i].pin.toString(); ",
									"      let pinlen = pinstr.length;",
									"      pm.expect(pinlen).to.equal(4);",
									"    }",
									"});",
									"",
									"//Valid digits in puk",
									"pm.test(\"Validate puk format\", ()=>{",
									"    const response = pm.response.json();",
									"    let len = response.length;",
									"    for (let i = 0; i < len; i++){",
									"      let pukstr = response[i].puk.toString(); ",
									"      let puklen = pukstr.length;",
									"      pm.expect(puklen).to.equal(8);",
									"    }",
									"});",
									"",
									"//Test to check iccid of the request matches the response",
									"pm.test(\"Validate iccid on request and response\", ()=>{",
									"    const response = pm.response.json();",
									"    pm.expect(response.iccid).to.eql(pm.collectionVariables.get(\"geticcid0\"));",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/esims/{{geticcid0}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims",
								"{{geticcid0}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get eSIM details and status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {",
									"  'type': 'object',",
									"  'properties': {",
									"      'iccid': { 'type': 'string' },",
									"      'pin': { 'type': 'string' },",
									"      'puk': { 'type': 'string' },",
									"      'matchingId': { 'type': 'string' },",
									"      'smdpAddress': { 'type': 'string' },",
									"      'profileStatus': { 'type': 'string' },",
									"      'firstInstalledDateTime': { 'type': 'integer' },",
									"      'customerRef': { 'type': 'string' }",
									"  },",
									"  'required': [",
									"      'iccid',",
									"      'pin',",
									"      'puk',",
									"      'matchingId',",
									"      'smdpAddress',",
									"      'profileStatus',",
									"      'firstInstalledDateTime',",
									"      'customerRef'",
									"  ]",
									"};",
									"",
									"",
									"//Test to check status",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"//Test to check JSON data format",
									"pm.test(\"Response contains valid JSON data\", ()=>{",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"//Valid digits in iccid",
									"pm.test(\"Validate if iccid's contain 19 digits\", ()=>{",
									"    const response = pm.response.json();",
									"    let len = response.length;",
									"    for (let i = 0; i < len; i++){",
									"      let iccidstr = response[i].iccid.toString(); ",
									"      let iccidlen = iccidstr.length;",
									"      pm.expect(iccidlen).to.equal(19);",
									"    }",
									"});",
									"",
									"//Valid digits in pin",
									"pm.test(\"Validate pin format\", ()=>{",
									"    const response = pm.response.json();",
									"    let len = response.length;",
									"    for (let i = 0; i < len; i++){",
									"      let pinstr = response[i].pin.toString(); ",
									"      let pinlen = pinstr.length;",
									"      pm.expect(pinlen).to.equal(4);",
									"    }",
									"});",
									"",
									"//Valid digits in puk",
									"pm.test(\"Validate puk format\", ()=>{",
									"    const response = pm.response.json();",
									"    let len = response.length;",
									"    for (let i = 0; i < len; i++){",
									"      let pukstr = response[i].puk.toString(); ",
									"      let puklen = pukstr.length;",
									"      pm.expect(puklen).to.equal(8);",
									"    }",
									"});",
									"",
									"//Test to check iccid of the request matches the response",
									"pm.test(\"Validate iccid on request and response\", ()=>{",
									"    const response = pm.response.json();",
									"    pm.expect(response.iccid).to.eql(pm.collectionVariables.get(\"geticcid1\"));",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/esims/{{geticcid1}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims",
								"{{geticcid1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get eSIM details and status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {",
									"  'type': 'object',",
									"  'properties': {",
									"      'iccid': { 'type': 'string' },",
									"      'pin': { 'type': 'string' },",
									"      'puk': { 'type': 'string' },",
									"      'matchingId': { 'type': 'string' },",
									"      'smdpAddress': { 'type': 'string' },",
									"      'profileStatus': { 'type': 'string' },",
									"      'firstInstalledDateTime': { 'type': 'integer' },",
									"      'customerRef': { 'type': 'string' }",
									"  },",
									"  'required': [",
									"      'iccid',",
									"      'pin',",
									"      'puk',",
									"      'matchingId',",
									"      'smdpAddress',",
									"      'profileStatus',",
									"      'firstInstalledDateTime',",
									"      'customerRef'",
									"  ]",
									"};",
									"",
									"",
									"//Test to check status",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"//Test to check JSON data format",
									"pm.test(\"Response contains valid JSON data\", ()=>{",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"//Valid digits in iccid",
									"pm.test(\"Validate if iccid's contain 19 digits\", ()=>{",
									"    const response = pm.response.json();",
									"    let len = response.length;",
									"    for (let i = 0; i < len; i++){",
									"      let iccidstr = response[i].iccid.toString(); ",
									"      let iccidlen = iccidstr.length;",
									"      pm.expect(iccidlen).to.equal(19);",
									"    }",
									"});",
									"",
									"//Valid digits in pin",
									"pm.test(\"Validate pin format\", ()=>{",
									"    const response = pm.response.json();",
									"    let len = response.length;",
									"    for (let i = 0; i < len; i++){",
									"      let pinstr = response[i].pin.toString(); ",
									"      let pinlen = pinstr.length;",
									"      pm.expect(pinlen).to.equal(4);",
									"    }",
									"});",
									"",
									"//Valid digits in puk",
									"pm.test(\"Validate puk format\", ()=>{",
									"    const response = pm.response.json();",
									"    let len = response.length;",
									"    for (let i = 0; i < len; i++){",
									"      let pukstr = response[i].puk.toString(); ",
									"      let puklen = pukstr.length;",
									"      pm.expect(puklen).to.equal(8);",
									"    }",
									"});",
									"",
									"//Test to check iccid of the request matches the response",
									"pm.test(\"Validate iccid on request and response\", ()=>{",
									"    const response = pm.response.json();",
									"    pm.expect(response.iccid).to.eql(pm.collectionVariables.get(\"geticcid2\"));",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/esims/{{geticcid2}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims",
								"{{geticcid2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get eSIM details and status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {",
									"  'type': 'object',",
									"  'properties': {",
									"      'iccid': { 'type': 'string' },",
									"      'pin': { 'type': 'string' },",
									"      'puk': { 'type': 'string' },",
									"      'matchingId': { 'type': 'string' },",
									"      'smdpAddress': { 'type': 'string' },",
									"      'profileStatus': { 'type': 'string' },",
									"      'firstInstalledDateTime': { 'type': 'integer' },",
									"      'customerRef': { 'type': 'string' },",
									"      'appleInstallUrl': { 'type': 'string' }",
									"  },",
									"  'required': [",
									"      'iccid',",
									"      'pin',",
									"      'puk',",
									"      'matchingId',",
									"      'smdpAddress',",
									"      'profileStatus',",
									"      'firstInstalledDateTime',",
									"      'customerRef',",
									"      'appleInstallUrl'",
									"  ]",
									"};",
									"",
									"",
									"//Test to check status",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"//Test to check JSON data format",
									"pm.test(\"Response contains valid JSON data\", ()=>{",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"//Valid digits in iccid",
									"pm.test(\"Validate if iccid's contain 19 digits\", ()=>{",
									"    const response = pm.response.json();",
									"    let len = response.length;",
									"    for (let i = 0; i < len; i++){",
									"      let iccidstr = response[i].iccid.toString(); ",
									"      let iccidlen = iccidstr.length;",
									"      pm.expect(iccidlen).to.equal(19);",
									"    }",
									"});",
									"",
									"//Valid digits in pin",
									"pm.test(\"Validate pin format\", ()=>{",
									"    const response = pm.response.json();",
									"    let len = response.length;",
									"    for (let i = 0; i < len; i++){",
									"      let pinstr = response[i].pin.toString(); ",
									"      let pinlen = pinstr.length;",
									"      pm.expect(pinlen).to.equal(4);",
									"    }",
									"});",
									"",
									"//Valid digits in puk",
									"pm.test(\"Validate puk format\", ()=>{",
									"    const response = pm.response.json();",
									"    let len = response.length;",
									"    for (let i = 0; i < len; i++){",
									"      let pukstr = response[i].puk.toString(); ",
									"      let puklen = pukstr.length;",
									"      pm.expect(puklen).to.equal(8);",
									"    }",
									"});",
									"",
									"//Test to check iccid of the request matches the response",
									"pm.test(\"Validate iccid on request and response\", ()=>{",
									"    const response = pm.response.json();",
									"    pm.expect(response.iccid).to.eql(pm.collectionVariables.get(\"geticcid3\"));",
									"});",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/esims/{{geticcid3}}?additionalFields=appleInstallUrl",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims",
								"{{geticcid3}}"
							],
							"query": [
								{
									"key": "additionalFields",
									"value": "appleInstallUrl"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get eSIM details and status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response body is a valid JSON object\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response has all expected properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('iccid');",
									"    pm.expect(jsonData).to.have.property('pin');",
									"    pm.expect(jsonData).to.have.property('puk');",
									"    pm.expect(jsonData).to.have.property('matchingId');",
									"    pm.expect(jsonData).to.have.property('smdpAddress');",
									"    pm.expect(jsonData).to.have.property('profileStatus');",
									"    pm.expect(jsonData).to.have.property('firstInstalledDateTime');",
									"    pm.expect(jsonData).to.have.property('customerRef');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/esims/{{geticcid3}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims",
								"{{geticcid3}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get eSIM details and status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {",
									"  'type': 'object',",
									"  'properties': {",
									"      'iccid': { 'type': 'string' },",
									"      'pin': { 'type': 'string' },",
									"      'puk': { 'type': 'string' },",
									"      'matchingId': { 'type': 'string' },",
									"      'smdpAddress': { 'type': 'string' },",
									"      'profileStatus': { 'type': 'string' },",
									"      'firstInstalledDateTime': { 'type': 'integer' },",
									"      'customerRef': { 'type': 'string' },",
									"      'appleInstallUrl': { 'type': 'string' }",
									"  },",
									"  'required': [",
									"      'iccid',",
									"      'pin',",
									"      'puk',",
									"      'matchingId',",
									"      'smdpAddress',",
									"      'profileStatus',",
									"      'firstInstalledDateTime',",
									"      'customerRef',",
									"      'appleInstallUrl'",
									"  ]",
									"};",
									"",
									"",
									"//Test to check status",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"//Test to check JSON data format",
									"pm.test(\"Response contains valid JSON data\", ()=>{",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"//Valid digits in iccid",
									"pm.test(\"Validate if iccid's contain 19 digits\", ()=>{",
									"    const response = pm.response.json();",
									"    let len = response.length;",
									"    for (let i = 0; i < len; i++){",
									"      let iccidstr = response[i].iccid.toString(); ",
									"      let iccidlen = iccidstr.length;",
									"      pm.expect(iccidlen).to.equal(19);",
									"    }",
									"});",
									"",
									"//Valid digits in pin",
									"pm.test(\"Validate pin format\", ()=>{",
									"    const response = pm.response.json();",
									"    let len = response.length;",
									"    for (let i = 0; i < len; i++){",
									"      let pinstr = response[i].pin.toString(); ",
									"      let pinlen = pinstr.length;",
									"      pm.expect(pinlen).to.equal(4);",
									"    }",
									"});",
									"",
									"//Valid digits in puk",
									"pm.test(\"Validate puk format\", ()=>{",
									"    const response = pm.response.json();",
									"    let len = response.length;",
									"    for (let i = 0; i < len; i++){",
									"      let pukstr = response[i].puk.toString(); ",
									"      let puklen = pukstr.length;",
									"      pm.expect(puklen).to.equal(8);",
									"    }",
									"});",
									"",
									"//Test to check iccid of the request matches the response",
									"pm.test(\"Validate iccid on request and response\", ()=>{",
									"    const response = pm.response.json();",
									"    pm.expect(response.iccid).to.eql(pm.collectionVariables.get(\"geticcid4\"));",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/esims/{{geticcid4}}?additionalFields=appleInstallUrl",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims",
								"{{geticcid4}}"
							],
							"query": [
								{
									"key": "additionalFields",
									"value": "appleInstallUrl"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get eSIM details and status (Fail - Invalid iccid)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Check status is 403",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"//Check response body message",
									"pm.test(\"Response Body is correct\", function () {",
									"    pm.response.to.have.body(\"{\\\"message\\\":\\\"Access denied\\\"}\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/esims/{{iccid-na}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims",
								"{{iccid-na}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get eSIM details and status (Fail - Invalid iccid) Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Check status is 403",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"//Check response body message",
									"pm.test(\"Response Body is correct\", function () {",
									"    pm.response.to.have.body(\"{\\\"message\\\":\\\"access denied\\\"}\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY-FAIL}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/esims/{{geticcid0}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims",
								"{{geticcid0}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get History of an eSIM",
			"item": [
				{
					"name": "Get history of an eSIM",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"actions\": {",
									"      \"type\": \"array\",",
									"      \"items\": [",
									"        {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"name\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"date\": {",
									"              \"type\": \"string\"",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"name\",",
									"            \"date\"",
									"          ]",
									"        }",
									"      ]",
									"    },",
									"    \"rows\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"pageCount\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"pageSize\": {",
									"      \"type\": \"integer\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"actions\",",
									"    \"rows\",",
									"    \"pageCount\",",
									"    \"pageSize\"",
									"  ]",
									"}",
									"",
									"//Test to check response of endpoint",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"//Test to check the format of JSON data is as expected",
									"pm.test(\"Response contains valid JSON data\", ()=>{",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"//Test to validate date format",
									"pm.test(\"Validate date format\", ()=>{",
									"    const response = pm.response.json();",
									"    let len = response.actions.length;",
									"    ",
									"    for (let i = 0; i < len; i++){",
									"       const userKeyRegExp = /^[0-9]{4}\\-[0-9]{2}\\-[0-9]{2}[T][0-9]{2}\\:[0-9]{2}\\:[0-9]{2}?$/;",
									"       let str1 = response.actions[i].date.slice(0,19);",
									"       let valid1 = userKeyRegExp.test(str1);",
									"       console.log(str1);",
									"       pm.expect(valid1).to.be.true;",
									"    }",
									"});",
									"",
									"//Test the response currentPage",
									"pm.test(\"Validate products is not empty\", ()=>{",
									"    const response = pm.response.json();",
									"    let products = response.actions;",
									"    let len = products.length;",
									"    pm.expect(len).to.not.eq(0);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/esims/{{geticcid0}}/history",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims",
								"{{geticcid0}}",
								"history"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get history of an eSIM",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"actions\": {",
									"      \"type\": \"array\",",
									"      \"items\": [",
									"        {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"name\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"date\": {",
									"              \"type\": \"string\"",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"name\",",
									"            \"date\"",
									"          ]",
									"        }",
									"      ]",
									"    },",
									"    \"rows\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"pageCount\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"pageSize\": {",
									"      \"type\": \"integer\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"actions\",",
									"    \"rows\",",
									"    \"pageCount\",",
									"    \"pageSize\"",
									"  ]",
									"}",
									"",
									"//Test to check response of endpoint",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"//Test to check the format of JSON data is as expected",
									"pm.test(\"Response contains valid JSON data\", ()=>{",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"//Test to validate date format",
									"pm.test(\"Validate date format\", ()=>{",
									"    const response = pm.response.json();",
									"    let len = response.actions.length;",
									"    ",
									"    for (let i = 0; i < len; i++){",
									"       const userKeyRegExp = /^[0-9]{4}\\-[0-9]{2}\\-[0-9]{2}[T][0-9]{2}\\:[0-9]{2}\\:[0-9]{2}?$/;",
									"       let str1 = response.actions[i].date.slice(0,19);",
									"       let valid1 = userKeyRegExp.test(str1);",
									"       console.log(str1);",
									"       pm.expect(valid1).to.be.true;",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/esims/{{geticcid1}}/history",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims",
								"{{geticcid1}}",
								"history"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get history of an eSIM",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is in JSON format\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});",
									"",
									"pm.test(\"Response contains actions array, rows, pageCount, and pageSize properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('actions', 'rows', 'pageCount', 'pageSize');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/esims/{{geticcid1}}/history",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims",
								"{{geticcid1}}",
								"history"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get history of an eSIM",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"actions\": {",
									"      \"type\": \"array\",",
									"      \"items\": [",
									"        {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"name\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"date\": {",
									"              \"type\": \"string\"",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"name\",",
									"            \"date\"",
									"          ]",
									"        }",
									"      ]",
									"    },",
									"    \"rows\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"pageCount\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"pageSize\": {",
									"      \"type\": \"integer\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"actions\",",
									"    \"rows\",",
									"    \"pageCount\",",
									"    \"pageSize\"",
									"  ]",
									"}",
									"",
									"//Test to check response of endpoint",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"//Test to check the format of JSON data is as expected",
									"pm.test(\"Response contains valid JSON data\", ()=>{",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"//Test to validate date format",
									"pm.test(\"Validate date format\", ()=>{",
									"    const response = pm.response.json();",
									"    let len = response.actions.length;",
									"    ",
									"    for (let i = 0; i < len; i++){",
									"       const userKeyRegExp = /^[0-9]{4}\\-[0-9]{2}\\-[0-9]{2}[T][0-9]{2}\\:[0-9]{2}\\:[0-9]{2}?$/;",
									"       let str1 = response.actions[i].date.slice(0,19);",
									"       let valid1 = userKeyRegExp.test(str1);",
									"       console.log(str1);",
									"       pm.expect(valid1).to.be.true;",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/esims/{{geticcid2}}/history",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims",
								"{{geticcid2}}",
								"history"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get history of an eSIM",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"actions\": {",
									"      \"type\": \"array\",",
									"      \"items\": [",
									"        {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"name\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"date\": {",
									"              \"type\": \"string\"",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"name\",",
									"            \"date\"",
									"          ]",
									"        }",
									"      ]",
									"    },",
									"    \"rows\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"pageCount\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"pageSize\": {",
									"      \"type\": \"integer\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"actions\",",
									"    \"rows\",",
									"    \"pageCount\",",
									"    \"pageSize\"",
									"  ]",
									"}",
									"",
									"//Test to check response of endpoint",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"//Test to check the format of JSON data is as expected",
									"pm.test(\"Response contains valid JSON data\", ()=>{",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"//Test to validate date format",
									"pm.test(\"Validate date format\", ()=>{",
									"    const response = pm.response.json();",
									"    let len = response.actions.length;",
									"    ",
									"    for (let i = 0; i < len; i++){",
									"       const userKeyRegExp = /^[0-9]{4}\\-[0-9]{2}\\-[0-9]{2}[T][0-9]{2}\\:[0-9]{2}\\:[0-9]{2}?$/;",
									"       let str1 = response.actions[i].date.slice(0,19);",
									"       let valid1 = userKeyRegExp.test(str1);",
									"       console.log(str1);",
									"       pm.expect(valid1).to.be.true;",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/esims/{{geticcid3}}/history",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims",
								"{{geticcid3}}",
								"history"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get history of an eSIM",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"actions\": {",
									"      \"type\": \"array\",",
									"      \"items\": [",
									"        {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"name\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"date\": {",
									"              \"type\": \"string\"",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"name\",",
									"            \"date\"",
									"          ]",
									"        }",
									"      ]",
									"    },",
									"    \"rows\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"pageCount\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"pageSize\": {",
									"      \"type\": \"integer\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"actions\",",
									"    \"rows\",",
									"    \"pageCount\",",
									"    \"pageSize\"",
									"  ]",
									"}",
									"",
									"//Test to check response of endpoint",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"//Test to check the format of JSON data is as expected",
									"pm.test(\"Response contains valid JSON data\", ()=>{",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"//Test to validate date format",
									"pm.test(\"Validate date format\", ()=>{",
									"    const response = pm.response.json();",
									"    let len = response.actions.length;",
									"    ",
									"    for (let i = 0; i < len; i++){",
									"       const userKeyRegExp = /^[0-9]{4}\\-[0-9]{2}\\-[0-9]{2}[T][0-9]{2}\\:[0-9]{2}\\:[0-9]{2}?$/;",
									"       let str1 = response.actions[i].date.slice(0,19);",
									"       let valid1 = userKeyRegExp.test(str1);",
									"       console.log(str1);",
									"       pm.expect(valid1).to.be.true;",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/esims/{{geticcid4}}/history",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims",
								"{{geticcid4}}",
								"history"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get history of an eSIM (Fail - invalid iccid)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Check status is 403",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"//Check response body message",
									"pm.test(\"Response Body is correct\", function () {",
									"    pm.response.to.have.body(\"{\\\"message\\\":\\\"Access denied\\\"}\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/esims/{{iccid-na}}/history",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims",
								"{{iccid-na}}",
								"history"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get history of an eSIM (Fail - invalid API Key)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Check status is 403",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"//Check response body message",
									"pm.test(\"Response Body is correct\", function () {",
									"    pm.response.to.have.body(\"{\\\"message\\\":\\\"access denied\\\"}\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY-FAIL}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/esims/{{geticcid0}}/history",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims",
								"{{geticcid0}}",
								"history"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get Status of bundle applied to eSIM",
			"item": [
				{
					"name": "Get the status of a Bundle applied to an eSIM",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"assignments\": {",
									"      \"type\": \"array\",",
									"      \"items\": [",
									"        {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"id\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"callTypeGroup\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"initialQuantity\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"remainingQuantity\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"assignmentDateTime\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"assignmentReference\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"bundleState\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"unlimited\": {",
									"              \"type\": \"boolean\"",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"id\",",
									"            \"callTypeGroup\",",
									"            \"initialQuantity\",",
									"            \"remainingQuantity\",",
									"            \"assignmentDateTime\",",
									"            \"assignmentReference\",",
									"            \"bundleState\",",
									"            \"unlimited\"",
									"          ]",
									"        }",
									"      ]",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"assignments\"",
									"  ]",
									"}",
									"",
									"//Check status code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Test to check the format of JSON data is as expected",
									"pm.test(\"Response contains valid JSON data\", ()=>{",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"//Test to validate date format",
									"pm.test(\"Validate date format\", ()=>{",
									"    const response = pm.response.json();",
									"",
									"    let len = response.assignments.length;",
									"    ",
									"    for (let i = 0; i < len; i++){",
									"       const userKeyRegExp = /^[0-9]{4}\\-[0-9]{2}\\-[0-9]{2}[T][0-9]{2}\\:[0-9]{2}\\:[0-9]{2}?$/;",
									"       let str1 = response.assignments[i].assignmentDateTime.slice(0,19);",
									"       let valid1 = userKeyRegExp.test(str1);",
									"       console.log(str1);",
									"       pm.expect(valid1).to.be.true;",
									"    }",
									"});",
									"",
									"//Test for bundle state",
									"pm.test(\"Validate bundle state\", ()=>{",
									"    const response = pm.response.json();",
									"    let bundlestatefield = [\"queued\",\"active\",\"expired\"];//Please updated if other actions are added",
									"    let len = response.assignments.length;",
									"    for(let i=0;i < len; i++){",
									"        pm.expect(bundlestatefield.includes(response.assignments[i].bundleState)).to.be.true;",
									"    }",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/esims/{{geticcid0}}/bundles/{{bundlename1}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims",
								"{{geticcid0}}",
								"bundles",
								"{{bundlename1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get the status of a Bundle applied to an eSIM",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Fixed the syntax error and updated the variable name",
									"pm.test(\"assign id\", ()=>{",
									"    const response = pm.response.json();",
									"    const assign_id = response.bundles[0].assignments[0].id;",
									"    pm.collectionVariables.set(\"assignment-id\", assign_id);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/esims/{{geticcid1}}/bundles",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims",
								"{{geticcid1}}",
								"bundles"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get the status of assignment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Get assign id to put it for assignment",
									"pm.test(\"assign id\", ()=>{",
									"    const response = pm.response.json();",
									"    const assign_id = response.bundles.assignments.id;",
									"    pm.collectionVariables.set(\"assignment-id\", \"id\");",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/esims/assignments?reference={{",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims",
								"assignments"
							],
							"query": [
								{
									"key": "reference",
									"value": "{{"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get the status of a Bundle applied to an eSIM",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"assignments\": {",
									"      \"type\": \"array\",",
									"      \"items\": [",
									"        {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"id\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"initialQuantity\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"remainingQuantity\": {",
									"              \"type\": \"integer\"",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"id\",",
									"            \"initialQuantity\",",
									"            \"remainingQuantity\"",
									"          ]",
									"        }",
									"      ]",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"assignments\"",
									"  ]",
									"}",
									"",
									"//Check status code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Test to check the format of JSON data is as expected",
									"pm.test(\"Response contains valid JSON data\", ()=>{",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"",
									"",
									"",
									"//Test to validate date format",
									"pm.test(\"Validate date format\", ()=>{",
									"    const response = pm.response.json();",
									"",
									"    let len = response.assignments.length;",
									"    ",
									"    for (let i = 0; i < len; i++){",
									"       const userKeyRegExp = /^[0-9]{4}\\-[0-9]{2}\\-[0-9]{2}[T][0-9]{2}\\:[0-9]{2}\\:[0-9]{2}?$/;",
									"       let str1 = response.assignments[i].assignmentDateTime.slice(0,19);",
									"       let valid1 = userKeyRegExp.test(str1);",
									"       console.log(str1);",
									"       pm.expect(valid1).to.be.true;",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/esims/{{geticcid4}}/bundles/{{bundlename2}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims",
								"{{geticcid4}}",
								"bundles",
								"{{bundlename2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get the status of a Bundle applied to an eSIM",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Get assign id to put it for assignment",
									"pm.test(\"assign id\", ()=>{",
									"    const response = pm.response.json();",
									"    const assign_id = response.bundles[0].assignments[0].id;",
									"    pm.collectionVariables.set(\"assignment-id-apple\", assign_id);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/esims/{{geticcid3}}/bundles",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims",
								"{{geticcid3}}",
								"bundles"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get the status of assignment-apple",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Get assign id to put it for assignment",
									"pm.test(\"assign id\", ()=>{",
									"    const response = pm.response.json();",
									"    const assign_id = response.bundles.assignments.id;",
									"    pm.collectionVariables.set(\"assignment-id\", \"id\");",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/esims/{{assignment-id-apple}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims",
								"{{assignment-id-apple}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get the status of a Bundle applied to an eSIM",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"assignments\": {",
									"      \"type\": \"array\",",
									"      \"items\": [",
									"        {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"id\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"initialQuantity\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"remainingQuantity\": {",
									"              \"type\": \"integer\"",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"id\",",
									"            \"initialQuantity\",",
									"            \"remainingQuantity\"",
									"          ]",
									"        }",
									"      ]",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"assignments\"",
									"  ]",
									"}",
									"",
									"//Check status code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Test to check the format of JSON data is as expected",
									"pm.test(\"Response contains valid JSON data\", ()=>{",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"",
									"//Test for initial Quantity and remaining Quantity",
									"pm.test(\"Validate bundle state\", ()=>{",
									"    const response = pm.response.json();",
									"    let len = response.assignments.length;",
									"    for(let i=0;i < len; i++){",
									"        pm.expect(response.assignments[0].initialQuantity).to.eql(1000000000);",
									"        pm.expect(response.assignments[0].remainingQuantity).to.eql(1000000000);",
									"    }",
									"});",
									"",
									"",
									"//Test to validate date format",
									"pm.test(\"Validate date format\", ()=>{",
									"    const response = pm.response.json();",
									"",
									"    let len = response.assignments.length;",
									"    ",
									"    for (let i = 0; i < len; i++){",
									"       const userKeyRegExp = /^[0-9]{4}\\-[0-9]{2}\\-[0-9]{2}[T][0-9]{2}\\:[0-9]{2}\\:[0-9]{2}?$/;",
									"       let str1 = response.assignments[i].assignmentDateTime.slice(0,19);",
									"       let valid1 = userKeyRegExp.test(str1);",
									"       console.log(str1);",
									"       pm.expect(valid1).to.be.true;",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/esims/{{geticcid3}}/bundles/{{bundlename3}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims",
								"{{geticcid3}}",
								"bundles",
								"{{bundlename3}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get the status of a Bundle applied to an eSIM",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Check status code",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"//Check response body message",
									"pm.test(\"Response Body is correct\", function () {",
									"    pm.response.to.have.body(\"{\\\"message\\\":\\\"Bundle \\'esim_1GB_77D_GB_V2\\' not found\\\"}\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/esims/{{geticcid2}}/bundles/{{bundlename-na}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims",
								"{{geticcid2}}",
								"bundles",
								"{{bundlename-na}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get the status of a Bundle applied to an eSIM - Fail invalid API Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Check status is 403",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"//Check response body message",
									"pm.test(\"Response Body is correct\", function () {",
									"    pm.response.to.have.body(\"{\\\"message\\\":\\\"access denied\\\"}\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY-FAIL}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/esims/{{geticcid3}}/bundles/{{bundlename2}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims",
								"{{geticcid3}}",
								"bundles",
								"{{bundlename2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get the status of a Bundle applied to an eSIM Copy 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Check status is 403",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"//Check response body message",
									"pm.test(\"Response Body is correct\", function () {",
									"    pm.response.to.have.body(\"{\\\"message\\\":\\\"Access denied\\\"}\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/esims/{{iccid-na}}/bundles/{{bundlename1}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims",
								"{{iccid-na}}",
								"bundles",
								"{{bundlename1}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Refresh eSIM",
			"item": [
				{
					"name": "Refresh an eSIM",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//To check status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//To check if the response body is as expected",
									"pm.test(\"Response Body is correct\", function () {",
									"    pm.response.to.have.body(\"{\\\"status\\\":\\\"Successfully refreshed SIM\\\"}\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/esims/{{geticcid1}}/refresh",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims",
								"{{geticcid1}}",
								"refresh"
							]
						}
					},
					"response": []
				},
				{
					"name": "Refresh an eSIM(Fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//To check status code is 500",
									"pm.test(\"Status code is 500\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									"",
									"//To check if the response body is as expected",
									"pm.test(\"Response Body is correct\", function () {",
									"    pm.response.to.have.body(\"{\\\"message\\\":\\\"Access denied\\\"}\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/esims/{{iccid-na}}/refresh",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims",
								"{{iccid-na}}",
								"refresh"
							]
						}
					},
					"response": []
				},
				{
					"name": "Refresh an eSIM(Fail - Invalid Api key)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//To check status code is 403",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"//To check if the response body is as expected",
									"pm.test(\"Response Body is correct\", function () {",
									"    pm.response.to.have.body(\"{\\\"message\\\":\\\"access denied\\\"}\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY-FAIL}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/esims/{{iccid-na}}/refresh",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims",
								"{{iccid-na}}",
								"refresh"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get API Details",
			"item": [
				{
					"name": "Get API details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Checking response status code",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"//Checking expected content of the response",
									"pm.test(\"Response has the expected content type of application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"//Checking each response element to be a string",
									"pm.test(\"Ensure the response body array elements are of the expected data type\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"    responseData.forEach(element => {",
									"        pm.expect(element).to.be.a('string');",
									"    });",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get API details - Fail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Checking response status code",
									"pm.test(\"Response status code is 403\", function () {",
									"    pm.expect(pm.response.code).to.equal(403);",
									"});",
									"",
									"//To check if the response body is as expected",
									"pm.test(\"Response Body is correct\", function () {",
									"    pm.response.to.have.body(\"{\\\"message\\\":\\\"access denied\\\"}\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY-FAIL}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get QR",
			"item": [
				{
					"name": "Get QR",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/esims/{{geticcid0}}/qr",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims",
								"{{geticcid0}}",
								"qr"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get QR",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/esims/{{geticcid1}}/qr",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims",
								"{{geticcid1}}",
								"qr"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get QR",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/esims/{{geticcid2}}/qr",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims",
								"{{geticcid2}}",
								"qr"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get QR",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/esims/{{geticcid3}}/qr",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims",
								"{{geticcid3}}",
								"qr"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get QR",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/esims/{{geticcid4}}/qr",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims",
								"{{geticcid4}}",
								"qr"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get QR - Fail Invalid ICCID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//To check status code is 403",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"//To check if the response body is as expected",
									"pm.test(\"Response Body is correct\", function () {",
									"    pm.response.to.have.body(\"{\\\"message\\\":\\\"Access denied\\\"}\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/esims/{{iccid-na}}}}/qr",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims",
								"{{iccid-na}}}}",
								"qr"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get QR - Fail API Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//To check status code is 403",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"//To check if the response body is as expected",
									"pm.test(\"Response Body is correct\", function () {",
									"    pm.response.to.have.body(\"{\\\"message\\\":\\\"access denied\\\"}\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY-FAIL}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/esims/{{geticcid4}}/qr",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims",
								"{{geticcid4}}",
								"qr"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Set Speed",
			"item": [
				{
					"name": "Speed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//To check status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//To check if the response body is as expected",
									"pm.test(\"Response Body is correct\", function () {",
									"    pm.response.to.have.body(\"{\\\"status\\\":\\\"Successfully set speed\\\"}\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"speed\": 64000\n}",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/esims/{{geticcid3}}/speed",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims",
								"{{geticcid3}}",
								"speed"
							]
						}
					},
					"response": []
				},
				{
					"name": "Speed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//To check status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//To check if the response body is as expected",
									"pm.test(\"Response Body is correct\", function () {",
									"    pm.response.to.have.body(\"{\\\"status\\\":\\\"Successfully set speed\\\"}\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"speed\": 256000\n}",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/esims/{{geticcid3}}/speed",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims",
								"{{geticcid3}}",
								"speed"
							]
						}
					},
					"response": []
				},
				{
					"name": "Speed - Invalid ICCID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//To check status code is 400",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"//To check if the response body is as expected",
									"pm.test(\"Response Body is correct\", function () {",
									"    pm.response.to.have.body(\"{\\\"message\\\":\\\"invalid speed value\\\"}\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"speed\": 512000\n}",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/esims/{{iccid-na}}/speed",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims",
								"{{iccid-na}}",
								"speed"
							]
						}
					},
					"response": []
				},
				{
					"name": "Speed Fail - API Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//To check status code is 403",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"//To check if the response body is as expected",
									"pm.test(\"Response Body is correct\", function () {",
									"    pm.response.to.have.body(\"{\\\"message\\\":\\\"access denied\\\"}\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY-FAIL}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"speed\": 512000\n}",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/esims/{{geticcid0}}/speed",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims",
								"{{geticcid0}}",
								"speed"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Update Reference",
			"item": [
				{
					"name": "Update sim details - iccid BICS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Response status code is 200",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"//Response has the required success status",
									"pm.test(\"Response has the status as success\", function () {",
									"     pm.response.to.have.body(\"{\\\"status\\\":\\\"success\\\"}\");",
									"});",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var rand_reference = \"Random reference no:-\" + pm.variables.replaceIn('{{$randomInt}}');",
									"pm.collectionVariables.set(\"reference-bics\", rand_reference);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY-DYN}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"iccid\": \"{{iccid-bics}}\",\n  \"customerRef\": \"{{reference-bics}}\"\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/esims",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update sim details - iccid Proximus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Response status code is 200",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"//Response has the required success status",
									"pm.test(\"Response has the status as success\", function () {",
									"     pm.response.to.have.body(\"{\\\"status\\\":\\\"success\\\"}\");",
									"});",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var rand_reference = \"Random reference no:-\" + pm.variables.replaceIn('{{$randomInt}}');",
									"pm.collectionVariables.set(\"reference-proximus\", rand_reference);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY-DYN}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"iccid\": \"{{iccid-proximus}}\",\n  \"customerRef\": \"{{reference-proximus}}\"\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/esims",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update sim details - iccid Hutch",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Response status code is 200",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"//Response has the required success status",
									"pm.test(\"Response has the status as success\", function () {",
									"     pm.response.to.have.body(\"{\\\"status\\\":\\\"success\\\"}\");",
									"});",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var rand_reference = \"Random reference no:-\" + pm.variables.replaceIn('{{$randomInt}}');",
									"pm.collectionVariables.set(\"reference-hutch\", rand_reference);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY-DYN}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"iccid\": \"{{iccid-hutch}}\",\n  \"customerRef\": \"{{reference-hutch}}\"\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/esims",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get eSIM details and status - iccid BICs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {",
									"  'type': 'object',",
									"  'properties': {",
									"      'iccid': { 'type': 'string' },",
									"      'pin': { 'type': 'string' },",
									"      'puk': { 'type': 'string' },",
									"      'matchingId': { 'type': 'string' },",
									"      'smdpAddress': { 'type': 'string' },",
									"      'profileStatus': { 'type': 'string' },",
									"      'firstInstalledDateTime': { 'type': 'integer' },",
									"      'customerRef': { 'type': 'string' }",
									"  },",
									"  'required': [",
									"      'iccid',",
									"      'pin',",
									"      'puk',",
									"      'matchingId',",
									"      'smdpAddress',",
									"      'profileStatus',",
									"      'firstInstalledDateTime',",
									"      'customerRef'",
									"  ]",
									"};",
									"",
									"",
									"//Test to check status",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"//Test to check JSON data format",
									"pm.test(\"Response contains valid JSON data\", ()=>{",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"//Test to check if the reference has been updated by the previous API call",
									"pm.test(\"Validate reference of the updated sim\", ()=>{",
									"    const response = pm.response.json();",
									"    pm.expect(response.customerRef).to.eql(pm.collectionVariables.get(\"reference-bics\"));",
									"});",
									"pm.collectionVariables.get(\"variable_key\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY-DYN}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{BaseURL}}/esims/{{iccid-bics}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims",
								"{{iccid-bics}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get eSIM details and status - iccid proximus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {",
									"  'type': 'object',",
									"  'properties': {",
									"      'iccid': { 'type': 'string' },",
									"      'pin': { 'type': 'string' },",
									"      'puk': { 'type': 'string' },",
									"      'matchingId': { 'type': 'string' },",
									"      'smdpAddress': { 'type': 'string' },",
									"      'profileStatus': { 'type': 'string' },",
									"      'firstInstalledDateTime': { 'type': 'integer' },",
									"      'customerRef': { 'type': 'string' }",
									"  },",
									"  'required': [",
									"      'iccid',",
									"      'pin',",
									"      'puk',",
									"      'matchingId',",
									"      'smdpAddress',",
									"      'profileStatus',",
									"      'firstInstalledDateTime',",
									"      'customerRef'",
									"  ]",
									"};",
									"",
									"",
									"//Test to check status",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"//Test to check JSON data format",
									"pm.test(\"Response contains valid JSON data\", ()=>{",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"//Test to check if the reference has been updated by the previous API call",
									"pm.test(\"Validate reference of the updated sim\", ()=>{",
									"    const response = pm.response.json();",
									"    pm.expect(response.customerRef).to.eql(pm.collectionVariables.get(\"reference-proximus\"));",
									"});",
									"pm.collectionVariables.get(\"variable_key\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY-DYN}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{BaseURL}}/esims/{{iccid-proximus}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims",
								"{{iccid-proximus}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get eSIM details and status - iccid hutch",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {",
									"  'type': 'object',",
									"  'properties': {",
									"      'iccid': { 'type': 'string' },",
									"      'pin': { 'type': 'string' },",
									"      'puk': { 'type': 'string' },",
									"      'matchingId': { 'type': 'string' },",
									"      'smdpAddress': { 'type': 'string' },",
									"      'profileStatus': { 'type': 'string' },",
									"      'firstInstalledDateTime': { 'type': 'integer' },",
									"      'customerRef': { 'type': 'string' }",
									"  },",
									"  'required': [",
									"      'iccid',",
									"      'pin',",
									"      'puk',",
									"      'matchingId',",
									"      'smdpAddress',",
									"      'profileStatus',",
									"      'firstInstalledDateTime',",
									"      'customerRef'",
									"  ]",
									"};",
									"",
									"",
									"//Test to check status",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"//Test to check JSON data format",
									"pm.test(\"Response contains valid JSON data\", ()=>{",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"//Test to check if the reference has been updated by the previous API call",
									"pm.test(\"Validate reference of the updated sim\", ()=>{",
									"    const response = pm.response.json();",
									"    pm.expect(response.customerRef).to.eql(pm.collectionVariables.get(\"reference-hutch\"));",
									"});",
									"pm.collectionVariables.get(\"variable_key\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY-DYN}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{BaseURL}}/esims/{{iccid-hutch}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims",
								"{{iccid-hutch}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update sim details (Fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Response status code is 403",
									"pm.test(\"Response status code is 403\", function () {",
									"    pm.expect(pm.response.code).to.equal(403);",
									"});",
									"",
									"//Response has the required success status",
									"pm.test(\"Response has the status as success\", function () {",
									"     pm.response.to.have.body(\"{\\\"message\\\":\\\"Access denied\\\"}\");",
									"});",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var rand_reference = \"Random reference no:-\" + pm.variables.replaceIn('{{$randomInt}}');",
									"pm.collectionVariables.set(\"reference\", rand_reference);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY-DYN}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"iccid\": \"{{iccid-na}}\",\n  \"customerRef\": \"{{reference}}\"\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/esims",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Auto-assign",
			"item": [
				{
					"name": "Apply a Bundle to an eSIM with sSIM auto-assign - BICs",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"var newiccid = response.esims[0].iccid;",
									"pm.collectionVariables.set(\"iccid-bics-AA\", newiccid);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const schema={",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"esims\": {",
									"      \"type\": \"array\",",
									"      \"items\": [",
									"        {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"status\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"iccid\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"bundle\": {",
									"              \"type\": \"string\"",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"status\",",
									"            \"iccid\",",
									"            \"bundle\"",
									"          ]",
									"        }",
									"      ]",
									"    },",
									"    \"applyReference\": {",
									"      \"type\": \"string\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"esims\",",
									"    \"applyReference\"",
									"  ]",
									"}",
									"",
									"//Test to check JSON data format",
									"pm.test(\"Response contains valid JSON data\", ()=>{",
									"    pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY-DYN}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{bundlename-bics}}\"\n}\n ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/esims/apply",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims",
								"apply"
							]
						}
					},
					"response": []
				},
				{
					"name": "Apply a Bundle to an eSIM with sSIM auto-assign - Proximus",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"var newiccid = response.esims[0].iccid;",
									"pm.collectionVariables.set(\"iccid-proximus-AA\", newiccid);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const schema={",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"esims\": {",
									"      \"type\": \"array\",",
									"      \"items\": [",
									"        {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"status\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"iccid\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"bundle\": {",
									"              \"type\": \"string\"",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"status\",",
									"            \"iccid\",",
									"            \"bundle\"",
									"          ]",
									"        }",
									"      ]",
									"    },",
									"    \"applyReference\": {",
									"      \"type\": \"string\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"esims\",",
									"    \"applyReference\"",
									"  ]",
									"}",
									"",
									"//Test to check JSON data format",
									"pm.test(\"Response contains valid JSON data\", ()=>{",
									"    pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY-DYN}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{bundlename-proximus}}\"\n}\n ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/esims/apply",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims",
								"apply"
							]
						}
					},
					"response": []
				},
				{
					"name": "Apply a Bundle to an eSIM with sSIM auto-assign - Hutch",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"var newiccid = response.esims[0].iccid;",
									"pm.collectionVariables.set(\"iccid-hutch-AA\", newiccid);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const schema={",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"esims\": {",
									"      \"type\": \"array\",",
									"      \"items\": [",
									"        {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"status\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"iccid\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"bundle\": {",
									"              \"type\": \"string\"",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"status\",",
									"            \"iccid\",",
									"            \"bundle\"",
									"          ]",
									"        }",
									"      ]",
									"    },",
									"    \"applyReference\": {",
									"      \"type\": \"string\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"esims\",",
									"    \"applyReference\"",
									"  ]",
									"}",
									"",
									"//Test to check JSON data format",
									"pm.test(\"Response contains valid JSON data\", ()=>{",
									"    pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY-DYN}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{bundlename-hutch}}\"\n}\n ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/esims/apply",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims",
								"apply"
							]
						}
					},
					"response": []
				},
				{
					"name": "List Bundles applied to an eSIM (BICs)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"bundles\": {",
									"      \"type\": \"array\",",
									"      \"items\": [",
									"        {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"name\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"description\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"assignments\": {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"id\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"callTypeGroup\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"initialQuantity\": {",
									"                      \"type\": \"integer\"",
									"                    },",
									"                    \"remainingQuantity\": {",
									"                      \"type\": \"integer\"",
									"                    },",
									"                    \"assignmentDateTime\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"assignmentReference\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"bundleState\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"id\",",
									"                    \"callTypeGroup\",",
									"                    \"initialQuantity\",",
									"                    \"remainingQuantity\",",
									"                    \"assignmentDateTime\",",
									"                    \"assignmentReference\",",
									"                    \"bundleState\"",
									"                  ]",
									"                }",
									"              ]",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"name\",",
									"            \"description\",",
									"            \"assignments\"",
									"          ]",
									"        }",
									"      ]",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"bundles\"",
									"  ]",
									"}",
									"",
									"//Test to check response of endpoint",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"//Test to check the format of JSON data is as expected",
									"pm.test(\"Response contains valid JSON data\", ()=>{",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"//Test to check bundle assigned to esim",
									"",
									"pm.test(\"Validate bundles assigned to the esim\", ()=>{",
									"    const response = pm.response.json();",
									"    pm.expect(response.bundles[0].name).to.eql(pm.collectionVariables.get(\"bundlename-bics\"));",
									"",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY-DYN}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/esims/{{iccid-bics-AA}}/bundles",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims",
								"{{iccid-bics-AA}}",
								"bundles"
							],
							"query": [
								{
									"key": "includeUsed",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List Bundles applied to an eSIM (Proximus)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"bundles\": {",
									"      \"type\": \"array\",",
									"      \"items\": [",
									"        {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"name\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"description\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"assignments\": {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"id\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"callTypeGroup\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"initialQuantity\": {",
									"                      \"type\": \"integer\"",
									"                    },",
									"                    \"remainingQuantity\": {",
									"                      \"type\": \"integer\"",
									"                    },",
									"                    \"assignmentDateTime\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"assignmentReference\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"bundleState\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"id\",",
									"                    \"callTypeGroup\",",
									"                    \"initialQuantity\",",
									"                    \"remainingQuantity\",",
									"                    \"assignmentDateTime\",",
									"                    \"assignmentReference\",",
									"                    \"bundleState\"",
									"                  ]",
									"                }",
									"              ]",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"name\",",
									"            \"description\",",
									"            \"assignments\"",
									"          ]",
									"        }",
									"      ]",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"bundles\"",
									"  ]",
									"}",
									"",
									"//Test to check response of endpoint",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"//Test to check the format of JSON data is as expected",
									"pm.test(\"Response contains valid JSON data\", ()=>{",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"//Test to check bundle assigned to esim",
									"",
									"pm.test(\"Validate bundles assigned to the esim\", ()=>{",
									"    const response = pm.response.json();",
									"    pm.expect(response.bundles[0].name).to.eql(pm.collectionVariables.get(\"bundlename-proximus\"));",
									"",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY-DYN}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/esims/{{iccid-proximus-AA}}/bundles",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims",
								"{{iccid-proximus-AA}}",
								"bundles"
							],
							"query": [
								{
									"key": "includeUsed",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List Bundles applied to an eSIM (Hutch)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"bundles\": {",
									"      \"type\": \"array\",",
									"      \"items\": [",
									"        {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"name\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"description\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"assignments\": {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"id\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"callTypeGroup\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"initialQuantity\": {",
									"                      \"type\": \"integer\"",
									"                    },",
									"                    \"remainingQuantity\": {",
									"                      \"type\": \"integer\"",
									"                    },",
									"                    \"assignmentDateTime\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"assignmentReference\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"bundleState\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"id\",",
									"                    \"callTypeGroup\",",
									"                    \"initialQuantity\",",
									"                    \"remainingQuantity\",",
									"                    \"assignmentDateTime\",",
									"                    \"assignmentReference\",",
									"                    \"bundleState\"",
									"                  ]",
									"                }",
									"              ]",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"name\",",
									"            \"description\",",
									"            \"assignments\"",
									"          ]",
									"        }",
									"      ]",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"bundles\"",
									"  ]",
									"}",
									"",
									"//Test to check response of endpoint",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"//Test to check the format of JSON data is as expected",
									"pm.test(\"Response contains valid JSON data\", ()=>{",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"//Test to check bundle assigned to esim",
									"",
									"pm.test(\"Validate bundles assigned to the esim\", ()=>{",
									"    const response = pm.response.json();",
									"    pm.expect(response.bundles[0].name).to.eql(pm.collectionVariables.get(\"bundlename-hutch\"));",
									"",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY-DYN}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/esims/{{iccid-hutch-AA}}/bundles",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims",
								"{{iccid-hutch-AA}}",
								"bundles"
							],
							"query": [
								{
									"key": "includeUsed",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Apply a Bundle to an eSIM with sSIM auto-assign (Fail - API Key)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Response has the status as success\", function () {",
									"     pm.response.to.have.body(\"{\\\"message\\\":\\\"access denied\\\"}\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY-FAIL}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{bundlename-bics}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/esims/apply",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims",
								"apply"
							]
						}
					},
					"response": []
				},
				{
					"name": "Apply a Bundle to an eSIM with sSIM auto-assign (Fail - No bundle)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Response has the status as success\", function () {",
									"     pm.response.to.have.body(\"{\\\"message\\\":\\\"access denied\\\"}\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY-FAIL}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{bundlename-na}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/esims/apply",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims",
								"apply"
							]
						}
					},
					"response": []
				},
				{
					"name": "Revokes latest assignment of given bundle to an eSIM Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Response status code is 200",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"//Response has the required success status",
									"pm.test(\"Response has the status as success\", function () {",
									"     pm.response.to.have.body(\"{\\\"status\\\":\\\"Successfully Revoked Bundle, bundle has been refunded to inventory\\\"}\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY-DYN}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/esims/{{iccid-bics-AA}}/bundles/{{bundlename-bics}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims",
								"{{iccid-bics-AA}}",
								"bundles",
								"{{bundlename-bics}}"
							],
							"query": [
								{
									"key": "refundToBalance",
									"value": null,
									"disabled": true
								},
								{
									"key": "offerId",
									"value": null,
									"disabled": true
								},
								{
									"key": "type",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Revokes latest assignment of given bundle to an eSIM",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Response status code is 200",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"//Response has the required success status",
									"pm.test(\"Response has the status as success\", function () {",
									"     pm.response.to.have.body(\"{\\\"status\\\":\\\"Successfully Revoked Bundle, bundle has been refunded to inventory\\\"}\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY-DYN}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/esims/{{iccid-proximus-AA}}/bundles/{{bundlename-proximus}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims",
								"{{iccid-proximus-AA}}",
								"bundles",
								"{{bundlename-proximus}}"
							],
							"query": [
								{
									"key": "refundToBalance",
									"value": null,
									"disabled": true
								},
								{
									"key": "offerId",
									"value": null,
									"disabled": true
								},
								{
									"key": "type",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Revokes latest assignment of given bundle to an eSIM",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Response status code is 200",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"//Response has the required success status",
									"pm.test(\"Response has the status as success\", function () {",
									"     pm.response.to.have.body(\"{\\\"status\\\":\\\"Successfully Revoked Bundle, bundle has been refunded to inventory\\\"}\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY-DYN}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/esims/{{iccid-hutch-AA}}/bundles/{{bundlename-hutch}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims",
								"{{iccid-hutch-AA}}",
								"bundles",
								"{{bundlename-hutch}}"
							],
							"query": [
								{
									"key": "refundToBalance",
									"value": null,
									"disabled": true
								},
								{
									"key": "offerId",
									"value": null,
									"disabled": true
								},
								{
									"key": "type",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Top Up Cross Over",
			"item": [
				{
					"name": "Apply a Bundle to an eSIM with sSIM auto-assign (Bics on Hutch)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Check status is 400",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"//Check response body message",
									"pm.test(\"Response Body is correct\", function () {",
									"    pm.response.to.have.body(\"{\\\"message\\\":\\\"Incompatible bundle profile combination\\\"}\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY-DYN}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"iccid\": \"{{iccid-hutch}}\",\n  \"name\": \"{{bundlename-bics}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/esims/apply",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims",
								"apply"
							]
						}
					},
					"response": []
				},
				{
					"name": "Apply a Bundle to an eSIM with sSIM auto-assign (Bics on proximus)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Check status is 400",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"//Check response body message",
									"pm.test(\"Response Body is correct\", function () {",
									"    pm.response.to.have.body(\"{\\\"message\\\":\\\"Incompatible bundle profile combination\\\"}\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY-DYN}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"iccid\": \"{{iccid-proximus}}\",\n  \"name\": \"{{bundlename-bics}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/esims/apply",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims",
								"apply"
							]
						}
					},
					"response": []
				},
				{
					"name": "Apply a Bundle to an eSIM with sSIM auto-assign (Hutch on Bics)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Check status is 400",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"//Check response body message",
									"pm.test(\"Response Body is correct\", function () {",
									"    pm.response.to.have.body(\"{\\\"message\\\":\\\"Incompatible bundle profile combination\\\"}\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY-DYN}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"iccid\": \"{{iccid-bics}}\",\n  \"name\": \"{{bundlename-hutch}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/esims/apply",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims",
								"apply"
							]
						}
					},
					"response": []
				},
				{
					"name": "Apply a Bundle to an eSIM with sSIM auto-assign (Hutch on proximus)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Check status is 400",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"//Check response body message",
									"pm.test(\"Response Body is correct\", function () {",
									"    pm.response.to.have.body(\"{\\\"message\\\":\\\"Incompatible bundle profile combination\\\"}\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY-DYN}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"iccid\": \"{{iccid-proximus}}\",\n  \"name\": \"{{bundlename-hutch}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/esims/apply",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims",
								"apply"
							]
						}
					},
					"response": []
				},
				{
					"name": "Apply a Bundle to an eSIM with sSIM auto-assign (Proximus on Hutch)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Check status is 400",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"//Check response body message",
									"pm.test(\"Response Body is correct\", function () {",
									"    pm.response.to.have.body(\"{\\\"message\\\":\\\"Incompatible bundle profile combination\\\"}\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY-DYN}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"iccid\": \"{{iccid-hutch}}\",\n  \"name\": \"{{bundlename-proximus}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/esims/apply",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims",
								"apply"
							]
						}
					},
					"response": []
				},
				{
					"name": "Apply a Bundle to an eSIM with sSIM auto-assign (Proximus on BICs)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Check status is 400",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"//Check response body message",
									"pm.test(\"Response Body is correct\", function () {",
									"    pm.response.to.have.body(\"{\\\"message\\\":\\\"Incompatible bundle profile combination\\\"}\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY-DYN}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"iccid\": \"{{iccid-bics}}\",\n  \"name\": \"{{bundlename-proximus}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/esims/apply",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims",
								"apply"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Assign with ICCID",
			"item": [
				{
					"name": "Apply a Bundle to an eSIM BICS",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"var newiccid = response.esims[0].iccid;",
									"pm.collectionVariables.set(\"iccid-appliedbundle\", newiccid);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const schema={",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"esims\": {",
									"      \"type\": \"array\",",
									"      \"items\": [",
									"        {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"status\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"iccid\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"bundle\": {",
									"              \"type\": \"string\"",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"status\",",
									"            \"iccid\",",
									"            \"bundle\"",
									"          ]",
									"        }",
									"      ]",
									"    },",
									"    \"applyReference\": {",
									"      \"type\": \"string\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"esims\",",
									"    \"applyReference\"",
									"  ]",
									"}",
									"",
									"//Test to check JSON data format",
									"pm.test(\"Response contains valid JSON data\", ()=>{",
									"    pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY-DYN}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"iccid\": \"{{iccid-bics}}\",\n  \"name\": \"{{bundlename-bics}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/esims/apply",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims",
								"apply"
							]
						}
					},
					"response": []
				},
				{
					"name": "Apply a Bundle to an eSIM Proximus",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"var newiccid = response.esims[0].iccid;",
									"pm.collectionVariables.set(\"iccid-appliedbundle\", newiccid);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const schema={",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"esims\": {",
									"      \"type\": \"array\",",
									"      \"items\": [",
									"        {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"status\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"iccid\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"bundle\": {",
									"              \"type\": \"string\"",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"status\",",
									"            \"iccid\",",
									"            \"bundle\"",
									"          ]",
									"        }",
									"      ]",
									"    },",
									"    \"applyReference\": {",
									"      \"type\": \"string\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"esims\",",
									"    \"applyReference\"",
									"  ]",
									"}",
									"",
									"//Test to check JSON data format",
									"pm.test(\"Response contains valid JSON data\", ()=>{",
									"    pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY-DYN}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"iccid\": \"{{iccid-proximus}}\",\n  \"name\": \"{{bundlename-proximus}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/esims/apply",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims",
								"apply"
							]
						}
					},
					"response": []
				},
				{
					"name": "Apply a Bundle to an eSIM Hutch",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"var newiccid = response.esims[0].iccid;",
									"pm.collectionVariables.set(\"iccid-appliedbundle\", newiccid);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const schema={",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"esims\": {",
									"      \"type\": \"array\",",
									"      \"items\": [",
									"        {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"status\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"iccid\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"bundle\": {",
									"              \"type\": \"string\"",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"status\",",
									"            \"iccid\",",
									"            \"bundle\"",
									"          ]",
									"        }",
									"      ]",
									"    },",
									"    \"applyReference\": {",
									"      \"type\": \"string\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"esims\",",
									"    \"applyReference\"",
									"  ]",
									"}",
									"",
									"//Test to check JSON data format",
									"pm.test(\"Response contains valid JSON data\", ()=>{",
									"    pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY-DYN}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"iccid\": \"{{iccid-hutch}}\",\n  \"name\": \"{{bundlename-hutch}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/esims/apply",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims",
								"apply"
							]
						}
					},
					"response": []
				},
				{
					"name": "List Bundles applied to an eSIM (Get assign id) BICs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"bundles\": {",
									"      \"type\": \"array\",",
									"      \"items\": [",
									"        {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"name\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"description\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"assignments\": {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"id\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"callTypeGroup\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"initialQuantity\": {",
									"                      \"type\": \"integer\"",
									"                    },",
									"                    \"remainingQuantity\": {",
									"                      \"type\": \"integer\"",
									"                    },",
									"                    \"assignmentDateTime\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"assignmentReference\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"bundleState\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"id\",",
									"                    \"callTypeGroup\",",
									"                    \"initialQuantity\",",
									"                    \"remainingQuantity\",",
									"                    \"assignmentDateTime\",",
									"                    \"assignmentReference\",",
									"                    \"bundleState\"",
									"                  ]",
									"                }",
									"              ]",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"name\",",
									"            \"description\",",
									"            \"assignments\"",
									"          ]",
									"        }",
									"      ]",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"bundles\"",
									"  ]",
									"}",
									"",
									"//Test to check response of endpoint",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"//Test to check the format of JSON data is as expected",
									"pm.test(\"Response contains valid JSON data\", ()=>{",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"const response = pm.response.json();",
									"pm.collectionVariables.set(\"assignid-bics\",response.bundles[0].assignments[0].id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY-DYN}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/esims/{{iccid-bics}}/bundles",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims",
								"{{iccid-bics}}",
								"bundles"
							],
							"query": [
								{
									"key": "includeUsed",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List Bundles applied to an eSIM (Get assign id) proximus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"bundles\": {",
									"      \"type\": \"array\",",
									"      \"items\": [",
									"        {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"name\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"description\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"assignments\": {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"id\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"callTypeGroup\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"initialQuantity\": {",
									"                      \"type\": \"integer\"",
									"                    },",
									"                    \"remainingQuantity\": {",
									"                      \"type\": \"integer\"",
									"                    },",
									"                    \"assignmentDateTime\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"assignmentReference\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"bundleState\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"id\",",
									"                    \"callTypeGroup\",",
									"                    \"initialQuantity\",",
									"                    \"remainingQuantity\",",
									"                    \"assignmentDateTime\",",
									"                    \"assignmentReference\",",
									"                    \"bundleState\"",
									"                  ]",
									"                }",
									"              ]",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"name\",",
									"            \"description\",",
									"            \"assignments\"",
									"          ]",
									"        }",
									"      ]",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"bundles\"",
									"  ]",
									"}",
									"",
									"//Test to check response of endpoint",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"//Test to check the format of JSON data is as expected",
									"pm.test(\"Response contains valid JSON data\", ()=>{",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"//Test to check bundle assigned to esim",
									"",
									"// pm.test(\"Validate bundles assigned to the esim\", ()=>{",
									"//     const response = pm.response.json();",
									"//     pm.expect(response.bundles.name).to.eql(pm.collectionVariables.get(\"variable_key\"));",
									"",
									"// });",
									"",
									"const response = pm.response.json();",
									"pm.collectionVariables.set(\"assignid-proximus\",response.bundles[0].assignments[0].id);",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY-DYN}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/esims/{{iccid-proximus}}/bundles",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims",
								"{{iccid-proximus}}",
								"bundles"
							],
							"query": [
								{
									"key": "includeUsed",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List Bundles applied to an eSIM (Get assign id) Hutch",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"bundles\": {",
									"      \"type\": \"array\",",
									"      \"items\": [",
									"        {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"name\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"description\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"assignments\": {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"id\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"callTypeGroup\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"initialQuantity\": {",
									"                      \"type\": \"integer\"",
									"                    },",
									"                    \"remainingQuantity\": {",
									"                      \"type\": \"integer\"",
									"                    },",
									"                    \"assignmentDateTime\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"assignmentReference\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"bundleState\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"id\",",
									"                    \"callTypeGroup\",",
									"                    \"initialQuantity\",",
									"                    \"remainingQuantity\",",
									"                    \"assignmentDateTime\",",
									"                    \"assignmentReference\",",
									"                    \"bundleState\"",
									"                  ]",
									"                }",
									"              ]",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"name\",",
									"            \"description\",",
									"            \"assignments\"",
									"          ]",
									"        }",
									"      ]",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"bundles\"",
									"  ]",
									"}",
									"",
									"//Test to check response of endpoint",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"//Test to check the format of JSON data is as expected",
									"pm.test(\"Response contains valid JSON data\", ()=>{",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"//Test to check bundle assigned to esim",
									"",
									"// pm.test(\"Validate bundles assigned to the esim\", ()=>{",
									"//     const response = pm.response.json();",
									"//     pm.expect(response.bundles.name).to.eql(pm.collectionVariables.get(\"variable_key\"));",
									"",
									"// });",
									"",
									"const response = pm.response.json();",
									"pm.collectionVariables.set(\"assignid-hutch\",response.bundles[0].assignments[0].id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY-DYN}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/esims/{{iccid-hutch}}/bundles",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims",
								"{{iccid-hutch}}",
								"bundles"
							],
							"query": [
								{
									"key": "includeUsed",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Revoke a specific Bundle Assignment from an eSIM BICs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test to check status",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"//Response has the required success status",
									"pm.test(\"Response has the status as success\", function () {",
									"     pm.response.to.have.body(\"{\\\"status\\\":\\\"Successfully Revoked Bundle, bundle has been refunded to inventory\\\"}\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY-DYN}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/esims/{{iccid-bics}}/bundles/{{bundlename-bics}}/assignments/{{assignid-bics}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims",
								"{{iccid-bics}}",
								"bundles",
								"{{bundlename-bics}}",
								"assignments",
								"{{assignid-bics}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Revoke a specific Bundle Assignment from an eSIM",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test to check status",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"//Response has the required success status",
									"pm.test(\"Response has the status as success\", function () {",
									"     pm.response.to.have.body(\"{\\\"status\\\":\\\"Successfully Revoked Bundle, bundle has been refunded to inventory\\\"}\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY-DYN}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/esims/{{iccid-proximus}}/bundles/{{bundlename-proximus}}/assignments/{{assignid-proximus}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims",
								"{{iccid-proximus}}",
								"bundles",
								"{{bundlename-proximus}}",
								"assignments",
								"{{assignid-proximus}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Revoke a specific Bundle Assignment from an eSIM",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test to check status",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"//Response has the required success status",
									"pm.test(\"Response has the status as success\", function () {",
									"     pm.response.to.have.body(\"{\\\"status\\\":\\\"Successfully Revoked Bundle, bundle has been refunded to inventory\\\"}\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY-DYN}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/esims/{{iccid-hutch}}/bundles/{{bundlename-hutch}}/assignments/{{assignid-hutch}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims",
								"{{iccid-hutch}}",
								"bundles",
								"{{bundlename-hutch}}",
								"assignments",
								"{{assignid-hutch}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "List Bundles applied to an eSIM (Revoke bundle test) BICs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"bundles\": {",
									"      \"type\": \"array\",",
									"      \"items\": [",
									"        {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"name\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"description\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"assignments\": {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"id\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"callTypeGroup\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"initialQuantity\": {",
									"                      \"type\": \"integer\"",
									"                    },",
									"                    \"remainingQuantity\": {",
									"                      \"type\": \"integer\"",
									"                    },",
									"                    \"assignmentDateTime\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"assignmentReference\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"bundleState\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"id\",",
									"                    \"callTypeGroup\",",
									"                    \"initialQuantity\",",
									"                    \"remainingQuantity\",",
									"                    \"assignmentDateTime\",",
									"                    \"assignmentReference\",",
									"                    \"bundleState\"",
									"                  ]",
									"                }",
									"              ]",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"name\",",
									"            \"description\",",
									"            \"assignments\"",
									"          ]",
									"        }",
									"      ]",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"bundles\"",
									"  ]",
									"}",
									"",
									"//Test to check response of endpoint",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"//Test to check the format of JSON data is as expected",
									"pm.test(\"Response contains valid JSON data\", ()=>{",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"//Test to length of assignments",
									"",
									"pm.test(\"Validate bundles assigned to the esim\", ()=>{",
									"    const response = pm.response.json();",
									"    let len = response.bundles[0].assignments.length;",
									"    pm.expect(len).to.eql(1);",
									"",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY-DYN}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/esims/{{iccid-bics}}/bundles",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims",
								"{{iccid-bics}}",
								"bundles"
							],
							"query": [
								{
									"key": "includeUsed",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List Bundles applied to an eSIM (Revoke bundle test) Proximus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"bundles\": {",
									"      \"type\": \"array\",",
									"      \"items\": [",
									"        {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"name\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"description\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"assignments\": {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"id\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"callTypeGroup\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"initialQuantity\": {",
									"                      \"type\": \"integer\"",
									"                    },",
									"                    \"remainingQuantity\": {",
									"                      \"type\": \"integer\"",
									"                    },",
									"                    \"assignmentDateTime\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"assignmentReference\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"bundleState\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"id\",",
									"                    \"callTypeGroup\",",
									"                    \"initialQuantity\",",
									"                    \"remainingQuantity\",",
									"                    \"assignmentDateTime\",",
									"                    \"assignmentReference\",",
									"                    \"bundleState\"",
									"                  ]",
									"                }",
									"              ]",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"name\",",
									"            \"description\",",
									"            \"assignments\"",
									"          ]",
									"        }",
									"      ]",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"bundles\"",
									"  ]",
									"}",
									"",
									"//Test to check response of endpoint",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"//Test to check the format of JSON data is as expected",
									"pm.test(\"Response contains valid JSON data\", ()=>{",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"//Test to length of assignments",
									"",
									"pm.test(\"Validate bundles assigned to the esim\", ()=>{",
									"    const response = pm.response.json();",
									"    let len = response.bundles[0].assignments.length;",
									"    pm.expect(len).to.eql(1);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY-DYN}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/esims/{{iccid-proximus}}/bundles",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims",
								"{{iccid-proximus}}",
								"bundles"
							],
							"query": [
								{
									"key": "includeUsed",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List Bundles applied to an eSIM (Revoke bundle test) Hutch",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"bundles\": {",
									"      \"type\": \"array\",",
									"      \"items\": [",
									"        {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"name\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"description\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"assignments\": {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"id\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"callTypeGroup\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"initialQuantity\": {",
									"                      \"type\": \"integer\"",
									"                    },",
									"                    \"remainingQuantity\": {",
									"                      \"type\": \"integer\"",
									"                    },",
									"                    \"assignmentDateTime\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"assignmentReference\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"bundleState\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"id\",",
									"                    \"callTypeGroup\",",
									"                    \"initialQuantity\",",
									"                    \"remainingQuantity\",",
									"                    \"assignmentDateTime\",",
									"                    \"assignmentReference\",",
									"                    \"bundleState\"",
									"                  ]",
									"                }",
									"              ]",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"name\",",
									"            \"description\",",
									"            \"assignments\"",
									"          ]",
									"        }",
									"      ]",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"bundles\"",
									"  ]",
									"}",
									"",
									"//Test to check response of endpoint",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"//Test to check the format of JSON data is as expected",
									"pm.test(\"Response contains valid JSON data\", ()=>{",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"",
									"//Test to length of assignments",
									"",
									"pm.test(\"Validate bundles assigned to the esim\", ()=>{",
									"    const response = pm.response.json();",
									"    let len = response.bundles[0].assignments.length;",
									"    pm.expect(len).to.eql(1);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY-DYN}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/esims/{{iccid-hutch}}/bundles",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims",
								"{{iccid-hutch}}",
								"bundles"
							],
							"query": [
								{
									"key": "includeUsed",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "List Catalogue",
			"item": [
				{
					"name": "ListCatalogue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {",
									"  \"properties\": {",
									"    \"bundles\": {",
									"      \"type\": \"array\",",
									"      \"items\": [",
									"        {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"name\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"description\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"countries\": {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                }",
									"              ]",
									"            },",
									"            \"dataAmount\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"duration\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"speed\": {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"string\"",
									"                },",
									"                {",
									"                  \"type\": \"string\"",
									"                },",
									"                {",
									"                  \"type\": \"string\"",
									"                }",
									"              ]",
									"            },",
									"            \"autostart\": {",
									"              \"type\": \"boolean\"",
									"            },",
									"            \"unlimited\": {",
									"              \"type\": \"boolean\"",
									"            },",
									"            \"roamingEnabled\": {",
									"              \"type\": \"array\",",
									"              \"items\": {}",
									"            },",
									"            \"imageUrl\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"price\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"groups\": {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"string\"",
									"                }",
									"              ]",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"name\",",
									"            \"description\",",
									"            \"countries\",",
									"            \"dataAmount\",",
									"            \"duration\",",
									"            \"speed\",",
									"            \"autostart\",",
									"            \"unlimited\",",
									"            \"roamingEnabled\",",
									"            \"imageUrl\",",
									"            \"price\",",
									"            \"groups\"",
									"          ]",
									"        }",
									"      ]",
									"    },",
									"    \"pageCount\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"rows\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"pageSize\": {",
									"      \"type\": \"integer\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"bundles\",",
									"    \"pageCount\",",
									"    \"rows\",",
									"    \"pageSize\"",
									"  ]",
									"}",
									"",
									"//Test to check status",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"//Test to check response format",
									"pm.test('Response contains valid JSON data', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"",
									"//Test to check country array is not empty",
									"pm.test(\"Validate the countries array\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.bundles).to.be.an('array');",
									"    responseData.bundles.forEach(bundle => {",
									"        pm.expect(bundle.countries).to.be.an('array');",
									"        pm.expect(bundle.countries).to.have.lengthOf.at.least(1, \"Countries array should not be empty\");",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/catalogue",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"catalogue"
							]
						}
					},
					"response": []
				},
				{
					"name": "ListCatalogue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is in JSON format\", function () {",
									"    pm.response.to.have.header('Content-Type', 'application/json');",
									"});",
									"",
									"pm.test(\"Response contains bundles array\", function () {",
									"    pm.expect(pm.response.json()).to.have.property('bundles').that.is.an('array');",
									"});",
									"",
									"pm.test(\"Each bundle has name, description, countries, dataAmount, duration, speed, autostart, unlimited, roamingEnabled, imageUrl, price, and groups properties\", function () {",
									"    pm.response.json().bundles.forEach(function(bundle) {",
									"        pm.expect(bundle).to.have.all.keys('name', 'description', 'countries', 'dataAmount', 'duration', 'speed', 'autostart', 'unlimited', 'roamingEnabled', 'imageUrl', 'price', 'groups');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Bundles array is not empty\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData.bundles).to.be.an('array').that.is.not.empty;",
									"});",
									"",
									"",
									"pm.test(\"Price is a non-negative number\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.bundles).to.be.an('array');",
									"    ",
									"    responseData.bundles.forEach(bundle => {",
									"        pm.expect(bundle.price).to.be.a('number');",
									"        pm.expect(bundle.price).to.be.at.least(0);",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Page count, rows, and page size are non-negative integers\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.pageCount).to.be.a('number').and.to.be.at.least(0);",
									"    pm.expect(responseData.rows).to.be.a('number').and.to.be.at.least(0);",
									"    pm.expect(responseData.pageSize).to.be.a('number').and.to.be.at.least(0);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/catalogue",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"catalogue"
							]
						}
					},
					"response": []
				},
				{
					"name": "ListCatalogueByPageNo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test to check status",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"//Test to check country array is not empty",
									"pm.test(\"Validate the countries array\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.bundles).to.be.an('array');",
									"    responseData.bundles.forEach(bundle => {",
									"        pm.expect(bundle.countries).to.be.an('array');",
									"        pm.expect(bundle.countries).to.have.lengthOf.at.least(1, \"Countries array should not be empty\");",
									"    });",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/catalogue?page={{pageNo}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"catalogue"
							],
							"query": [
								{
									"key": "perPage",
									"value": "",
									"disabled": true
								},
								{
									"key": "direction",
									"value": "",
									"disabled": true
								},
								{
									"key": "orderBy",
									"value": "",
									"disabled": true
								},
								{
									"key": "description",
									"value": "",
									"disabled": true
								},
								{
									"key": "group",
									"value": "",
									"disabled": true
								},
								{
									"key": "countries",
									"value": "",
									"disabled": true
								},
								{
									"key": "region",
									"value": "",
									"disabled": true
								},
								{
									"key": "page",
									"value": "{{pageNo}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ListCatalogueByPageNo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Each bundle has a positive price\", function () {",
									"    pm.response.json().bundles.forEach(bundle => {",
									"        pm.expect(bundle.price).to.be.a('number').and.to.be.greaterThan(0);",
									"    });",
									"});",
									"",
									"pm.test(\"Each bundle has a valid data amount\", function () {",
									"    pm.response.json().bundles.forEach(bundle => {",
									"        pm.expect(bundle.dataAmount).to.be.a('number').and.to.be.at.least(0);",
									"    });",
									"});",
									"",
									"pm.test(\"Each bundle has a valid duration\", function () {",
									"    pm.response.json().bundles.forEach(bundle => {",
									"        pm.expect(bundle.duration).to.be.a('number').and.to.be.at.least(0);",
									"    });",
									"});",
									"",
									"pm.test(\"Each bundle has a non-empty groups array\", function () {",
									"    pm.response.json().bundles.forEach(bundle => {",
									"        pm.expect(bundle.groups).to.be.an('array').and.to.not.be.empty;",
									"    });",
									"});",
									"",
									"pm.test(\"Each bundle has the autostart property set to true\", function () {",
									"    pm.response.json().bundles.forEach(bundle => {",
									"        pm.expect(bundle.autostart).to.be.true;",
									"    });",
									"});",
									"",
									"pm.test(\"Each bundle has a valid countries array\", function () {",
									"    pm.response.json().bundles.forEach(bundle => {",
									"        pm.expect(bundle.countries).to.be.an('array').and.to.have.lengthOf.at.least(1);",
									"        bundle.countries.forEach(country => {",
									"            pm.expect(country).to.be.an('object');",
									"            pm.expect(country.name).to.be.a('string').and.to.not.be.empty;",
									"            pm.expect(country.region).to.be.a('string').and.to.not.be.empty;",
									"            pm.expect(country.iso).to.be.a('string').and.to.not.be.empty;",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Each bundle has a valid roamingEnabled array\", function () {",
									"    pm.response.json().bundles.forEach(bundle => {",
									"        pm.expect(bundle.roamingEnabled).to.be.an('array').and.to.have.lengthOf.at.least(1);",
									"        bundle.roamingEnabled.forEach(country => {",
									"            pm.expect(country).to.be.an('object');",
									"            pm.expect(country.name).to.be.a('string').and.to.not.be.empty;",
									"            pm.expect(country.region).to.be.a('string').and.to.not.be.empty;",
									"            pm.expect(country.iso).to.be.a('string').and.to.not.be.empty;",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Response contains pageCount, rows, and pageSize properties\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.have.property('pageCount');",
									"    pm.expect(responseData).to.have.property('rows');",
									"    pm.expect(responseData).to.have.property('pageSize');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/catalogue?page={{pageNo}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"catalogue"
							],
							"query": [
								{
									"key": "page",
									"value": "{{pageNo}}"
								},
								{
									"key": "perPage",
									"value": "",
									"disabled": true
								},
								{
									"key": "direction",
									"value": "",
									"disabled": true
								},
								{
									"key": "orderBy",
									"value": "",
									"disabled": true
								},
								{
									"key": "description",
									"value": "",
									"disabled": true
								},
								{
									"key": "group",
									"value": "",
									"disabled": true
								},
								{
									"key": "countries",
									"value": "",
									"disabled": true
								},
								{
									"key": "region",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ListCatalogueByPageNo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {",
									"  \"properties\": {",
									"    \"bundles\": {",
									"      \"type\": \"array\",",
									"      \"items\": [",
									"        {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"name\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"description\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"countries\": {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                }",
									"              ]",
									"            },",
									"            \"dataAmount\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"duration\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"speed\": {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"string\"",
									"                },",
									"                {",
									"                  \"type\": \"string\"",
									"                },",
									"                {",
									"                  \"type\": \"string\"",
									"                }",
									"              ]",
									"            },",
									"            \"autostart\": {",
									"              \"type\": \"boolean\"",
									"            },",
									"            \"unlimited\": {",
									"              \"type\": \"boolean\"",
									"            },",
									"            \"roamingEnabled\": {",
									"              \"type\": \"array\",",
									"              \"items\": {}",
									"            },",
									"            \"imageUrl\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"price\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"groups\": {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"string\"",
									"                }",
									"              ]",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"name\",",
									"            \"description\",",
									"            \"countries\",",
									"            \"dataAmount\",",
									"            \"duration\",",
									"            \"speed\",",
									"            \"autostart\",",
									"            \"unlimited\",",
									"            \"roamingEnabled\",",
									"            \"imageUrl\",",
									"            \"price\",",
									"            \"groups\"",
									"          ]",
									"        }",
									"      ]",
									"    },",
									"    \"pageCount\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"rows\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"pageSize\": {",
									"      \"type\": \"integer\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"bundles\",",
									"    \"pageCount\",",
									"    \"rows\",",
									"    \"pageSize\"",
									"  ]",
									"}",
									"",
									"//Test to check status",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"//Test to check response format",
									"pm.test('Response contains valid JSON data', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/catalogue?page={{pageNo-invalid}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"catalogue"
							],
							"query": [
								{
									"key": "perPage",
									"value": "",
									"disabled": true
								},
								{
									"key": "direction",
									"value": "",
									"disabled": true
								},
								{
									"key": "orderBy",
									"value": "",
									"disabled": true
								},
								{
									"key": "description",
									"value": "",
									"disabled": true
								},
								{
									"key": "group",
									"value": "",
									"disabled": true
								},
								{
									"key": "countries",
									"value": "",
									"disabled": true
								},
								{
									"key": "region",
									"value": "",
									"disabled": true
								},
								{
									"key": "page",
									"value": "{{pageNo-invalid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ListCatalogueByPerPage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {",
									"  \"properties\": {",
									"    \"bundles\": {",
									"      \"type\": \"array\",",
									"      \"items\": [",
									"        {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"name\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"description\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"countries\": {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                }",
									"              ]",
									"            },",
									"            \"dataAmount\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"duration\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"speed\": {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"string\"",
									"                },",
									"                {",
									"                  \"type\": \"string\"",
									"                },",
									"                {",
									"                  \"type\": \"string\"",
									"                }",
									"              ]",
									"            },",
									"            \"autostart\": {",
									"              \"type\": \"boolean\"",
									"            },",
									"            \"unlimited\": {",
									"              \"type\": \"boolean\"",
									"            },",
									"            \"roamingEnabled\": {",
									"              \"type\": \"array\",",
									"              \"items\": {}",
									"            },",
									"            \"imageUrl\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"price\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"groups\": {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"string\"",
									"                }",
									"              ]",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"name\",",
									"            \"description\",",
									"            \"countries\",",
									"            \"dataAmount\",",
									"            \"duration\",",
									"            \"speed\",",
									"            \"autostart\",",
									"            \"unlimited\",",
									"            \"roamingEnabled\",",
									"            \"imageUrl\",",
									"            \"price\",",
									"            \"groups\"",
									"          ]",
									"        }",
									"      ]",
									"    },",
									"    \"pageCount\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"rows\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"pageSize\": {",
									"      \"type\": \"integer\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"bundles\",",
									"    \"pageCount\",",
									"    \"rows\",",
									"    \"pageSize\"",
									"  ]",
									"}",
									"",
									"//Test to check status",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"//Test to check JSON data format",
									"pm.test(\"Response contains valid JSON data\", ()=>{",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"//Test the response pageSize",
									"pm.test(\"Validate pageSize to be same as perPage\", ()=>{",
									"const pageSize = pm.response.json().pageSize;",
									"const expectedPageSize = pm.variables.get(\"perPage\");",
									"pm.expect(pageSize).to.eql(parseInt(expectedPageSize));",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/catalogue?perPage={{perPage}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"catalogue"
							],
							"query": [
								{
									"key": "page",
									"value": "",
									"disabled": true
								},
								{
									"key": "direction",
									"value": "",
									"disabled": true
								},
								{
									"key": "orderBy",
									"value": "",
									"disabled": true
								},
								{
									"key": "description",
									"value": "",
									"disabled": true
								},
								{
									"key": "group",
									"value": "",
									"disabled": true
								},
								{
									"key": "countries",
									"value": "",
									"disabled": true
								},
								{
									"key": "region",
									"value": "",
									"disabled": true
								},
								{
									"key": "perPage",
									"value": "{{perPage}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ListCatalogueByPerPage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {",
									"  \"properties\": {",
									"    \"bundles\": {",
									"      \"type\": \"array\",",
									"      \"items\": [",
									"        {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"name\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"description\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"countries\": {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                }",
									"              ]",
									"            },",
									"            \"dataAmount\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"duration\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"speed\": {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"string\"",
									"                },",
									"                {",
									"                  \"type\": \"string\"",
									"                },",
									"                {",
									"                  \"type\": \"string\"",
									"                }",
									"              ]",
									"            },",
									"            \"autostart\": {",
									"              \"type\": \"boolean\"",
									"            },",
									"            \"unlimited\": {",
									"              \"type\": \"boolean\"",
									"            },",
									"            \"roamingEnabled\": {",
									"              \"type\": \"array\",",
									"              \"items\": {}",
									"            },",
									"            \"imageUrl\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"price\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"groups\": {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"string\"",
									"                }",
									"              ]",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"name\",",
									"            \"description\",",
									"            \"countries\",",
									"            \"dataAmount\",",
									"            \"duration\",",
									"            \"speed\",",
									"            \"autostart\",",
									"            \"unlimited\",",
									"            \"roamingEnabled\",",
									"            \"imageUrl\",",
									"            \"price\",",
									"            \"groups\"",
									"          ]",
									"        }",
									"      ]",
									"    },",
									"    \"pageCount\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"rows\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"pageSize\": {",
									"      \"type\": \"integer\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"bundles\",",
									"    \"pageCount\",",
									"    \"rows\",",
									"    \"pageSize\"",
									"  ]",
									"}",
									"",
									"//Test to check status",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"//Test to check JSON data format",
									"pm.test(\"Response contains valid JSON data\", ()=>{",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/catalogue?perPage={{perPage-invalid}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"catalogue"
							],
							"query": [
								{
									"key": "page",
									"value": "",
									"disabled": true
								},
								{
									"key": "direction",
									"value": "",
									"disabled": true
								},
								{
									"key": "orderBy",
									"value": "",
									"disabled": true
								},
								{
									"key": "description",
									"value": "",
									"disabled": true
								},
								{
									"key": "group",
									"value": "",
									"disabled": true
								},
								{
									"key": "countries",
									"value": "",
									"disabled": true
								},
								{
									"key": "region",
									"value": "",
									"disabled": true
								},
								{
									"key": "perPage",
									"value": "{{perPage-invalid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ListCatalogueByPageNoAndPerPage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"bundles\": {",
									"      \"type\": \"array\",",
									"      \"items\": [",
									"        {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"name\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"description\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"countries\": {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                }",
									"              ]",
									"            },",
									"            \"dataAmount\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"duration\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"speed\": {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"string\"",
									"                },",
									"                {",
									"                  \"type\": \"string\"",
									"                },",
									"                {",
									"                  \"type\": \"string\"",
									"                },",
									"                {",
									"                  \"type\": \"string\"",
									"                }",
									"              ]",
									"            },",
									"            \"autostart\": {",
									"              \"type\": \"boolean\"",
									"            },",
									"            \"unlimited\": {",
									"              \"type\": \"boolean\"",
									"            },",
									"            \"roamingEnabled\": {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                }",
									"              ]",
									"            },",
									"            \"imageUrl\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"price\": {",
									"              \"type\": \"number\"",
									"            },",
									"            \"groups\": {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"string\"",
									"                }",
									"              ]",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"name\",",
									"            \"description\",",
									"            \"countries\",",
									"            \"dataAmount\",",
									"            \"duration\",",
									"            \"speed\",",
									"            \"autostart\",",
									"            \"unlimited\",",
									"            \"roamingEnabled\",",
									"            \"imageUrl\",",
									"            \"price\",",
									"            \"groups\"",
									"          ]",
									"        }",
									"      ]",
									"    },",
									"    \"pageCount\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"rows\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"pageSize\": {",
									"      \"type\": \"integer\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"bundles\",",
									"    \"pageCount\",",
									"    \"rows\",",
									"    \"pageSize\"",
									"  ]",
									"}",
									"",
									"//Test to check status",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"//Test to check response format",
									"pm.test('Response contains valid JSON data', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"//Test to check country array is not empty",
									"pm.test(\"Validate the countries array\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.bundles).to.be.an('array');",
									"    responseData.bundles.forEach(bundle => {",
									"        pm.expect(bundle.countries).to.be.an('array');",
									"        pm.expect(bundle.countries).to.have.lengthOf.at.least(1, \"Countries array should not be empty\");",
									"    });",
									"});",
									"",
									"//Test the response pageSize",
									"pm.test(\"Validate pageSize to be same as perPage\", ()=>{",
									"const pageSize = pm.response.json().pageSize;",
									"const expectedPageSize = pm.variables.get(\"perPage\")",
									"pm.expect(pageSize).to.eql(parseInt(expectedPageSize));",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/catalogue?page={{pageNo}}&perPage={{perPage}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"catalogue"
							],
							"query": [
								{
									"key": "page",
									"value": "{{pageNo}}"
								},
								{
									"key": "direction",
									"value": "",
									"disabled": true
								},
								{
									"key": "orderBy",
									"value": "",
									"disabled": true
								},
								{
									"key": "description",
									"value": "",
									"disabled": true
								},
								{
									"key": "group",
									"value": "",
									"disabled": true
								},
								{
									"key": "countries",
									"value": "",
									"disabled": true
								},
								{
									"key": "region",
									"value": "",
									"disabled": true
								},
								{
									"key": "perPage",
									"value": "{{perPage}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ListCatalogueByDirection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {",
									"  \"properties\": {",
									"    \"bundles\": {",
									"      \"type\": \"array\",",
									"      \"items\": [",
									"        {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"name\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"description\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"countries\": {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                }",
									"              ]",
									"            },",
									"            \"dataAmount\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"duration\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"speed\": {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"string\"",
									"                },",
									"                {",
									"                  \"type\": \"string\"",
									"                },",
									"                {",
									"                  \"type\": \"string\"",
									"                }",
									"              ]",
									"            },",
									"            \"autostart\": {",
									"              \"type\": \"boolean\"",
									"            },",
									"            \"unlimited\": {",
									"              \"type\": \"boolean\"",
									"            },",
									"            \"roamingEnabled\": {",
									"              \"type\": \"array\",",
									"              \"items\": {}",
									"            },",
									"            \"imageUrl\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"price\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"groups\": {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"string\"",
									"                }",
									"              ]",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"name\",",
									"            \"description\",",
									"            \"countries\",",
									"            \"dataAmount\",",
									"            \"duration\",",
									"            \"speed\",",
									"            \"autostart\",",
									"            \"unlimited\",",
									"            \"roamingEnabled\",",
									"            \"imageUrl\",",
									"            \"price\",",
									"            \"groups\"",
									"          ]",
									"        }",
									"      ]",
									"    },",
									"    \"pageCount\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"rows\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"pageSize\": {",
									"      \"type\": \"integer\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"bundles\",",
									"    \"pageCount\",",
									"    \"rows\",",
									"    \"pageSize\"",
									"  ]",
									"}",
									"",
									"//Test to check status",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"//Test to check JSON data format",
									"pm.test(\"Response contains valid JSON data\", ()=>{",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Assert that data is in Ascending order",
									"pm.test(\"Data is in ascending order\", () => {",
									"    var jsonData= pm.response.json();",
									"    var bundles = jsonData.bundles;",
									"    var bundles1 = bundles.sort();",
									"    pm.expect(bundles).to.eql(bundles1);",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/catalogue?direction=desc&orderBy=duration",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"catalogue"
							],
							"query": [
								{
									"key": "page",
									"value": "",
									"disabled": true
								},
								{
									"key": "perPage",
									"value": "",
									"disabled": true
								},
								{
									"key": "direction",
									"value": "desc"
								},
								{
									"key": "description",
									"value": "",
									"disabled": true
								},
								{
									"key": "group",
									"value": "",
									"disabled": true
								},
								{
									"key": "countries",
									"value": "",
									"disabled": true
								},
								{
									"key": "region",
									"value": "",
									"disabled": true
								},
								{
									"key": "orderBy",
									"value": "duration"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ListCatalogueByDirection Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {",
									"  \"properties\": {",
									"    \"bundles\": {",
									"      \"type\": \"array\",",
									"      \"items\": [",
									"        {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"name\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"description\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"countries\": {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                }",
									"              ]",
									"            },",
									"            \"dataAmount\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"duration\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"speed\": {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"string\"",
									"                },",
									"                {",
									"                  \"type\": \"string\"",
									"                },",
									"                {",
									"                  \"type\": \"string\"",
									"                }",
									"              ]",
									"            },",
									"            \"autostart\": {",
									"              \"type\": \"boolean\"",
									"            },",
									"            \"unlimited\": {",
									"              \"type\": \"boolean\"",
									"            },",
									"            \"roamingEnabled\": {",
									"              \"type\": \"array\",",
									"              \"items\": {}",
									"            },",
									"            \"imageUrl\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"price\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"groups\": {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"string\"",
									"                }",
									"              ]",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"name\",",
									"            \"description\",",
									"            \"countries\",",
									"            \"dataAmount\",",
									"            \"duration\",",
									"            \"speed\",",
									"            \"autostart\",",
									"            \"unlimited\",",
									"            \"roamingEnabled\",",
									"            \"imageUrl\",",
									"            \"price\",",
									"            \"groups\"",
									"          ]",
									"        }",
									"      ]",
									"    },",
									"    \"pageCount\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"rows\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"pageSize\": {",
									"      \"type\": \"integer\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"bundles\",",
									"    \"pageCount\",",
									"    \"rows\",",
									"    \"pageSize\"",
									"  ]",
									"}",
									"",
									"//Test to check status",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"// //Test to check JSON data format",
									"// pm.test(\"Response contains valid JSON data\", ()=>{",
									"//     pm.response.to.have.jsonSchema(schema);",
									"// });",
									"",
									"// // Assert that data is in Ascending order",
									"// pm.test(\"Data is in ascending order\", () => {",
									"//     var jsonData= pm.response.json();",
									"//     var bundles = jsonData.bundles;",
									"//     var bundles1 = bundles.sort();",
									"//     pm.expect(bundles).to.eql(bundles1);",
									"// });",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/catalogue?orderBy=bundleName&direction=asc",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"catalogue"
							],
							"query": [
								{
									"key": "page",
									"value": "",
									"disabled": true
								},
								{
									"key": "perPage",
									"value": "",
									"disabled": true
								},
								{
									"key": "description",
									"value": "",
									"disabled": true
								},
								{
									"key": "group",
									"value": "",
									"disabled": true
								},
								{
									"key": "countries",
									"value": "",
									"disabled": true
								},
								{
									"key": "region",
									"value": "",
									"disabled": true
								},
								{
									"key": "orderBy",
									"value": "bundleName"
								},
								{
									"key": "direction",
									"value": "asc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ListCatalogueByDirection Copy 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check ascending order\", function () {",
									"",
									"    const planname = [];",
									"    pm.response.json().bundles.forEach(x => {",
									"        planname.push(x.name);",
									"    });",
									"",
									"    let sorting = Array.from(planname);",
									"",
									"    sorting.sort();",
									"  ",
									"    pm.expect(sorting).to.eql(planname);",
									"    ",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/catalogue?orderBy=bundleName&direction=asc",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"catalogue"
							],
							"query": [
								{
									"key": "page",
									"value": "",
									"disabled": true
								},
								{
									"key": "perPage",
									"value": "",
									"disabled": true
								},
								{
									"key": "description",
									"value": "",
									"disabled": true
								},
								{
									"key": "group",
									"value": "",
									"disabled": true
								},
								{
									"key": "countries",
									"value": "",
									"disabled": true
								},
								{
									"key": "region",
									"value": "",
									"disabled": true
								},
								{
									"key": "orderBy",
									"value": "bundleName"
								},
								{
									"key": "direction",
									"value": "asc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ListCatalogueByDirection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {",
									"  \"properties\": {",
									"    \"bundles\": {",
									"      \"type\": \"array\",",
									"      \"items\": [",
									"        {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"name\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"description\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"countries\": {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                }",
									"              ]",
									"            },",
									"            \"dataAmount\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"duration\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"speed\": {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"string\"",
									"                },",
									"                {",
									"                  \"type\": \"string\"",
									"                },",
									"                {",
									"                  \"type\": \"string\"",
									"                }",
									"              ]",
									"            },",
									"            \"autostart\": {",
									"              \"type\": \"boolean\"",
									"            },",
									"            \"unlimited\": {",
									"              \"type\": \"boolean\"",
									"            },",
									"            \"roamingEnabled\": {",
									"              \"type\": \"array\",",
									"              \"items\": {}",
									"            },",
									"            \"imageUrl\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"price\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"groups\": {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"string\"",
									"                }",
									"              ]",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"name\",",
									"            \"description\",",
									"            \"countries\",",
									"            \"dataAmount\",",
									"            \"duration\",",
									"            \"speed\",",
									"            \"autostart\",",
									"            \"unlimited\",",
									"            \"roamingEnabled\",",
									"            \"imageUrl\",",
									"            \"price\",",
									"            \"groups\"",
									"          ]",
									"        }",
									"      ]",
									"    },",
									"    \"pageCount\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"rows\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"pageSize\": {",
									"      \"type\": \"integer\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"bundles\",",
									"    \"pageCount\",",
									"    \"rows\",",
									"    \"pageSize\"",
									"  ]",
									"}",
									"",
									"//Test to check status",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"//Test to check JSON data format",
									"pm.test(\"Response contains valid JSON data\", ()=>{",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Assert that data is in Ascending order",
									"pm.test(\"Data is in ascending order\", () => {",
									"    var jsonData= pm.response.json();",
									"    var bundles = jsonData.bundles;",
									"    var bundles1 = bundles.sort();",
									"    pm.expect(bundles).to.eql(bundles1);",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/catalogue?direction=asc",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"catalogue"
							],
							"query": [
								{
									"key": "page",
									"value": "",
									"disabled": true
								},
								{
									"key": "perPage",
									"value": "",
									"disabled": true
								},
								{
									"key": "orderBy",
									"value": "",
									"disabled": true
								},
								{
									"key": "description",
									"value": "",
									"disabled": true
								},
								{
									"key": "group",
									"value": "",
									"disabled": true
								},
								{
									"key": "countries",
									"value": "",
									"disabled": true
								},
								{
									"key": "region",
									"value": "",
									"disabled": true
								},
								{
									"key": "direction",
									"value": "asc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ListCatalogueByPageNoPerPageDirection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"bundles\": {",
									"      \"type\": \"array\",",
									"      \"items\": [",
									"        {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"name\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"description\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"countries\": {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                }",
									"              ]",
									"            },",
									"            \"dataAmount\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"duration\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"speed\": {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"string\"",
									"                },",
									"                {",
									"                  \"type\": \"string\"",
									"                },",
									"                {",
									"                  \"type\": \"string\"",
									"                },",
									"                {",
									"                  \"type\": \"string\"",
									"                }",
									"              ]",
									"            },",
									"            \"autostart\": {",
									"              \"type\": \"boolean\"",
									"            },",
									"            \"unlimited\": {",
									"              \"type\": \"boolean\"",
									"            },",
									"            \"roamingEnabled\": {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                }",
									"              ]",
									"            },",
									"            \"imageUrl\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"price\": {",
									"              \"type\": \"number\"",
									"            },",
									"            \"groups\": {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"string\"",
									"                }",
									"              ]",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"name\",",
									"            \"description\",",
									"            \"countries\",",
									"            \"dataAmount\",",
									"            \"duration\",",
									"            \"speed\",",
									"            \"autostart\",",
									"            \"unlimited\",",
									"            \"roamingEnabled\",",
									"            \"imageUrl\",",
									"            \"price\",",
									"            \"groups\"",
									"          ]",
									"        }",
									"      ]",
									"    },",
									"    \"pageCount\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"rows\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"pageSize\": {",
									"      \"type\": \"integer\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"bundles\",",
									"    \"pageCount\",",
									"    \"rows\",",
									"    \"pageSize\"",
									"  ]",
									"}",
									"",
									"//Test to check status",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"//Test to check JSON data format",
									"pm.test(\"Response contains valid JSON data\", ()=>{",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"//Test the response pageSize",
									"pm.test(\"Validate pageSize to be same as perPage\", ()=>{",
									"const pageSize = pm.response.json().pageSize;",
									"const expectedPageSize = pm.variables.get(\"perPage\")",
									"pm.expect(pageSize).to.eql(parseInt(expectedPageSize));",
									"const response = pm.response.json();",
									"let len = response.bundles.length;",
									"pm.expect(len).to.eql(parseInt(expectedPageSize));",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/catalogue?page={{pageNo}}&perPage={{perPage}}&direction={{direction}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"catalogue"
							],
							"query": [
								{
									"key": "page",
									"value": "{{pageNo}}"
								},
								{
									"key": "perPage",
									"value": "{{perPage}}"
								},
								{
									"key": "direction",
									"value": "{{direction}}"
								},
								{
									"key": "orderBy",
									"value": "",
									"disabled": true
								},
								{
									"key": "description",
									"value": "",
									"disabled": true
								},
								{
									"key": "group",
									"value": "",
									"disabled": true
								},
								{
									"key": "countries",
									"value": "",
									"disabled": true
								},
								{
									"key": "region",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ListCatalogueByOrderBy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {",
									"  \"properties\": {",
									"    \"bundles\": {",
									"      \"type\": \"array\",",
									"      \"items\": [",
									"        {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"name\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"description\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"countries\": {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                }",
									"              ]",
									"            },",
									"            \"dataAmount\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"duration\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"speed\": {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"string\"",
									"                },",
									"                {",
									"                  \"type\": \"string\"",
									"                },",
									"                {",
									"                  \"type\": \"string\"",
									"                }",
									"              ]",
									"            },",
									"            \"autostart\": {",
									"              \"type\": \"boolean\"",
									"            },",
									"            \"unlimited\": {",
									"              \"type\": \"boolean\"",
									"            },",
									"            \"roamingEnabled\": {",
									"              \"type\": \"array\",",
									"              \"items\": {}",
									"            },",
									"            \"imageUrl\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"price\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"groups\": {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"string\"",
									"                }",
									"              ]",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"name\",",
									"            \"description\",",
									"            \"countries\",",
									"            \"dataAmount\",",
									"            \"duration\",",
									"            \"speed\",",
									"            \"autostart\",",
									"            \"unlimited\",",
									"            \"roamingEnabled\",",
									"            \"imageUrl\",",
									"            \"price\",",
									"            \"groups\"",
									"          ]",
									"        }",
									"      ]",
									"    },",
									"    \"pageCount\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"rows\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"pageSize\": {",
									"      \"type\": \"integer\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"bundles\",",
									"    \"pageCount\",",
									"    \"rows\",",
									"    \"pageSize\"",
									"  ]",
									"}",
									"",
									"//Test to check status",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"//Test to check JSON data format",
									"pm.test(\"Response contains valid JSON data\", ()=>{",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Assert that data is in Ascending order",
									"pm.test(\"Data is in ascending order\", () => {",
									"    var jsonData= pm.response.json();",
									"    var bundles = jsonData.bundles;",
									"    var bundles1 = bundles.sort();",
									"    pm.expect(bundles).to.eql(bundles1);",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/catalogue?orderBy={{OrderBy}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"catalogue"
							],
							"query": [
								{
									"key": "page",
									"value": "",
									"disabled": true
								},
								{
									"key": "perPage",
									"value": "",
									"disabled": true
								},
								{
									"key": "direction",
									"value": "",
									"disabled": true
								},
								{
									"key": "orderBy",
									"value": "{{OrderBy}}"
								},
								{
									"key": "description",
									"value": "",
									"disabled": true
								},
								{
									"key": "group",
									"value": "",
									"disabled": true
								},
								{
									"key": "countries",
									"value": "",
									"disabled": true
								},
								{
									"key": "region",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ListCatalogueByOrderByAndByAutostart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test('Response is in JSON format', function () {",
									"    pm.response.to.have.header('Content-Type', 'application/json');",
									"})",
									"",
									"pm.test('Response contains bundles array', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('bundles').that.is.an('array');",
									"})",
									"",
									"pm.test('Response contains pageCount, rows, and pageSize properties', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('pageCount');",
									"    pm.expect(jsonData).to.have.property('rows');",
									"    pm.expect(jsonData).to.have.property('pageSize');",
									"})",
									"",
									"pm.test(\"Data amount and duration are non-negative integers for each bundle\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.bundles).to.be.an('array').and.to.have.length.above(0);",
									"",
									"    responseData.bundles.forEach(bundle => {",
									"        pm.expect(bundle.dataAmount).to.be.a('number').and.to.be.at.least(0);",
									"        pm.expect(bundle.duration).to.be.a('number').and.to.be.at.least(0);",
									"        let x = pm.collectionVariables.get(\"autostart\");",
									"        let y;",
									"        if(x===\"true\"){",
									"            y = true;",
									"        }",
									"        else if(x ===\"false\"){",
									"            y = false;  ",
									"        }",
									"        else{",
									"            y = \"siuuuu\";",
									"        }",
									"        pm.expect(bundle.autostart).to.eql(y);",
									"    });",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/catalogue?orderBy={{autostart}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"catalogue"
							],
							"query": [
								{
									"key": "page",
									"value": "",
									"disabled": true
								},
								{
									"key": "perPage",
									"value": "",
									"disabled": true
								},
								{
									"key": "direction",
									"value": "",
									"disabled": true
								},
								{
									"key": "description",
									"value": "",
									"disabled": true
								},
								{
									"key": "group",
									"value": "",
									"disabled": true
								},
								{
									"key": "countries",
									"value": "",
									"disabled": true
								},
								{
									"key": "region",
									"value": "",
									"disabled": true
								},
								{
									"key": "orderBy",
									"value": "dataAmount",
									"disabled": true
								},
								{
									"key": "orderBy",
									"value": "{{autostart}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ListCatalogueByOrderByWithAutostartAndDataamount",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test('Response is in JSON format', function () {",
									"    pm.response.to.have.header('Content-Type', 'application/json');",
									"})",
									"",
									"pm.test('Response contains bundles array', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('bundles').that.is.an('array');",
									"})",
									"",
									"pm.test('Response contains pageCount, rows, and pageSize properties', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('pageCount');",
									"    pm.expect(jsonData).to.have.property('rows');",
									"    pm.expect(jsonData).to.have.property('pageSize');",
									"})",
									"",
									"pm.test(\"Check auto start\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.bundles).to.be.an('array').and.to.have.length.above(0);",
									"",
									"    responseData.bundles.forEach(bundle => {",
									"        pm.expect(bundle.dataAmount).to.be.a('number').and.to.be.at.least(0);",
									"        pm.expect(bundle.duration).to.be.a('number').and.to.be.at.least(0);",
									"        let x = pm.collectionVariables.get(\"autostart\");",
									"        let y;",
									"        if(x===\"true\"){",
									"            y = true;",
									"        }",
									"        else if(x ===\"false\"){",
									"            y = false;  ",
									"        }",
									"        else{",
									"            y = \"siuuuu\";",
									"        }",
									"        pm.expect(bundle.autostart).to.eql(y);",
									"    });",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/catalogue?orderBy={{autostart}}&orderBy={{dataAmount}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"catalogue"
							],
							"query": [
								{
									"key": "page",
									"value": "",
									"disabled": true
								},
								{
									"key": "perPage",
									"value": "",
									"disabled": true
								},
								{
									"key": "direction",
									"value": "",
									"disabled": true
								},
								{
									"key": "orderBy",
									"value": "{{autostart}}"
								},
								{
									"key": "description",
									"value": "",
									"disabled": true
								},
								{
									"key": "group",
									"value": "",
									"disabled": true
								},
								{
									"key": "countries",
									"value": "",
									"disabled": true
								},
								{
									"key": "region",
									"value": "",
									"disabled": true
								},
								{
									"key": "orderBy",
									"value": "{{dataAmount}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ListCatalogueByPageNoPerPageDirectionOrderBy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test to check status",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"//Test the response pageSize",
									"pm.test(\"Validate pageSize to be same as perPage\", ()=>{",
									"const pageSize = pm.response.json().pageSize;",
									"const expectedPageSize = pm.variables.get(\"perPage\")",
									"pm.expect(pageSize).to.eql(parseInt(expectedPageSize));",
									"});",
									"",
									"// Assert that data is in Ascending order",
									"pm.test(\"Data is in ascending order\", () => {",
									"    var jsonData= pm.response.json();",
									"    var bundles = jsonData.bundles;",
									"    var bundles1 = bundles.sort();",
									"    pm.expect(bundles).to.eql(bundles1);",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/catalogue?page={{pageNo}}&perPage={{perPage}}&direction={{direction}}&orderBy={{OrderBy}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"catalogue"
							],
							"query": [
								{
									"key": "page",
									"value": "{{pageNo}}"
								},
								{
									"key": "perPage",
									"value": "{{perPage}}"
								},
								{
									"key": "direction",
									"value": "{{direction}}"
								},
								{
									"key": "orderBy",
									"value": "{{OrderBy}}"
								},
								{
									"key": "description",
									"value": "",
									"disabled": true
								},
								{
									"key": "group",
									"value": "",
									"disabled": true
								},
								{
									"key": "countries",
									"value": "",
									"disabled": true
								},
								{
									"key": "region",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ListCatalogueByPageNoPerPageDirectionOrderBy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an object with bundles, pageCount, rows, and pageSize properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('bundles', 'pageCount', 'rows', 'pageSize');",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Bundles array in the response should exist and be an array\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.bundles).to.exist.and.to.be.an('array');",
									"});",
									"",
									"",
									"pm.test(\"DataAmount and duration in each bundle are non-negative integers\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.bundles).to.be.an('array');",
									"",
									"    responseData.bundles.forEach(function(bundle) {",
									"        pm.expect(bundle.dataAmount).to.be.a('number').and.to.be.at.least(0);",
									"        pm.expect(bundle.duration).to.be.a('number').and.to.be.at.least(0);",
									"    });",
									"});",
									"",
									"pm.test(\"Autostart and unlimited properties in each bundle should be boolean values\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.bundles).to.be.an('array');",
									"    responseData.bundles.forEach(function(bundle) {",
									"        pm.expect(bundle.autostart).to.be.a('boolean');",
									"        pm.expect(bundle.unlimited).to.be.a('boolean');",
									"    });",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/catalogue?page={{pageNo}}&perPage={{perPage}}&direction={{direction}}&orderBy={{OrderBy}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"catalogue"
							],
							"query": [
								{
									"key": "page",
									"value": "{{pageNo}}"
								},
								{
									"key": "perPage",
									"value": "{{perPage}}"
								},
								{
									"key": "direction",
									"value": "{{direction}}"
								},
								{
									"key": "orderBy",
									"value": "{{OrderBy}}"
								},
								{
									"key": "description",
									"value": "",
									"disabled": true
								},
								{
									"key": "group",
									"value": "",
									"disabled": true
								},
								{
									"key": "countries",
									"value": "",
									"disabled": true
								},
								{
									"key": "region",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ListCatalogueByDescription",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"//Test to check status",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"// //To making sure only regions in response body is as per request",
									"// responseBody.bundles.forEach(bundles => {",
									"//     if (!(bundles.region === \"Asia\" || bundles.region === \"Oceania\")) {",
									"//         allRegionsValid = true;",
									"//         console.log(\"Invalid regions found in bundle:\", bundles.region);",
									"//     }",
									"// });",
									"",
									"// //Only Regions available as per request",
									"// pm.test(\"All regions are either Asia or Oceania\", () =>{",
									"//     pm.expect(allRegionsValid).to.be.true",
									"// })"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/catalogue?description={{description}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"catalogue"
							],
							"query": [
								{
									"key": "page",
									"value": "",
									"disabled": true
								},
								{
									"key": "perPage",
									"value": "",
									"disabled": true
								},
								{
									"key": "direction",
									"value": "",
									"disabled": true
								},
								{
									"key": "orderBy",
									"value": "",
									"disabled": true
								},
								{
									"key": "description",
									"value": "{{description}}"
								},
								{
									"key": "group",
									"value": "",
									"disabled": true
								},
								{
									"key": "countries",
									"value": "",
									"disabled": true
								},
								{
									"key": "region",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ListCatalogueByPageNoPerPageDirectionOrderByDescription",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {",
									"  \"properties\": {",
									"    \"bundles\": {",
									"      \"type\": \"array\",",
									"      \"items\": [",
									"        {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"name\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"description\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"countries\": {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                }",
									"              ]",
									"            },",
									"            \"dataAmount\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"duration\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"speed\": {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"string\"",
									"                },",
									"                {",
									"                  \"type\": \"string\"",
									"                },",
									"                {",
									"                  \"type\": \"string\"",
									"                }",
									"              ]",
									"            },",
									"            \"autostart\": {",
									"              \"type\": \"boolean\"",
									"            },",
									"            \"unlimited\": {",
									"              \"type\": \"boolean\"",
									"            },",
									"            \"roamingEnabled\": {",
									"              \"type\": \"array\",",
									"              \"items\": {}",
									"            },",
									"            \"imageUrl\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"price\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"groups\": {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"string\"",
									"                }",
									"              ]",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"name\",",
									"            \"description\",",
									"            \"countries\",",
									"            \"dataAmount\",",
									"            \"duration\",",
									"            \"speed\",",
									"            \"autostart\",",
									"            \"unlimited\",",
									"            \"roamingEnabled\",",
									"            \"imageUrl\",",
									"            \"price\",",
									"            \"groups\"",
									"          ]",
									"        }",
									"      ]",
									"    },",
									"    \"pageCount\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"rows\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"pageSize\": {",
									"      \"type\": \"integer\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"bundles\",",
									"    \"pageCount\",",
									"    \"rows\",",
									"    \"pageSize\"",
									"  ]",
									"}",
									"",
									"",
									"//Test to check status",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"//Test to check JSON data format",
									"pm.test(\"Response contains valid JSON data\", ()=>{",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// //Test the response pageSize",
									"// pm.test(\"Validate pageSize to be same as perPage\", ()=>{",
									"// const pageSize = pm.response.json().pageSize;",
									"// const expectedPageSize = pm.variables.get(\"perPage\")",
									"// pm.expect(pageSize).to.eql(parseInt(expectedPageSize));",
									"// });",
									"",
									"//Test to check Data is loaded OrderBy in Ascending Order",
									"var OrderBy = pm.response.json();",
									"function isAscending(arr) {",
									"    for (var i =1; i < arr.length; i++) {",
									"        if (arr[i] < arr[i -1]){",
									"            return false;",
									"        }",
									"    }",
									"    return true",
									"}",
									"",
									"var ascending = isAscending(OrderBy);",
									"",
									"pm.test(\"Data is in Ascending Order\", () =>{",
									"    pm.expect(ascending).to.be.true",
									"})",
									"",
									"var responseBody = pm.response.json();",
									"",
									"var allRegionsValid = true;",
									"",
									"//To making sure only regions in response body is as per request",
									"responseBody.bundles.forEach(bundles => {",
									"    if (!(bundles.region === \"Asia\" || bundles.region === \"Oceania\")) {",
									"        allRegionsValid = true;",
									"        console.log(\"Invalid regions found in bundle:\", bundles.region);",
									"    }",
									"});",
									"",
									"//Only Regions available as per request",
									"pm.test(\"All regions are either Asia or Oceania\", () =>{",
									"    pm.expect(allRegionsValid).to.be.true",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/catalogue?page={{pageNo}}&perPage={{perPage}}&direction={{direction}}&orderBy={{OrderBy}}&description={{description}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"catalogue"
							],
							"query": [
								{
									"key": "page",
									"value": "{{pageNo}}"
								},
								{
									"key": "perPage",
									"value": "{{perPage}}"
								},
								{
									"key": "direction",
									"value": "{{direction}}"
								},
								{
									"key": "orderBy",
									"value": "{{OrderBy}}"
								},
								{
									"key": "description",
									"value": "{{description}}"
								},
								{
									"key": "group",
									"value": "",
									"disabled": true
								},
								{
									"key": "countries",
									"value": "",
									"disabled": true
								},
								{
									"key": "region",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ListCataloguePageGroup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {",
									"  \"properties\": {",
									"    \"bundles\": {",
									"      \"type\": \"array\",",
									"      \"items\": [",
									"        {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"name\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"description\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"countries\": {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                }",
									"              ]",
									"            },",
									"            \"dataAmount\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"duration\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"speed\": {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"string\"",
									"                },",
									"                {",
									"                  \"type\": \"string\"",
									"                },",
									"                {",
									"                  \"type\": \"string\"",
									"                }",
									"              ]",
									"            },",
									"            \"autostart\": {",
									"              \"type\": \"boolean\"",
									"            },",
									"            \"unlimited\": {",
									"              \"type\": \"boolean\"",
									"            },",
									"            \"roamingEnabled\": {",
									"              \"type\": \"array\",",
									"              \"items\": {}",
									"            },",
									"            \"imageUrl\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"price\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"groups\": {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"string\"",
									"                }",
									"              ]",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"name\",",
									"            \"description\",",
									"            \"countries\",",
									"            \"dataAmount\",",
									"            \"duration\",",
									"            \"speed\",",
									"            \"autostart\",",
									"            \"unlimited\",",
									"            \"roamingEnabled\",",
									"            \"imageUrl\",",
									"            \"price\",",
									"            \"groups\"",
									"          ]",
									"        }",
									"      ]",
									"    },",
									"    \"pageCount\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"rows\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"pageSize\": {",
									"      \"type\": \"integer\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"bundles\",",
									"    \"pageCount\",",
									"    \"rows\",",
									"    \"pageSize\"",
									"  ]",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"// var responseBody = pm.response.json();",
									"// //Check to bundles array exists in the response",
									"// if (responseBody.bundles) {",
									"//     //Iterate over each bundle in the array",
									"//     responseBody.bundles.forEach(function(bundle) {",
									"//         //Check unlimited property is true",
									"//         pm.test (\"Bundle unlimites property is true\", () => {",
									"//             pm.expect(bundle.unlimited).to.be.true;",
									"//         });",
									"//     });",
									"// } else {",
									"//     //If Bundles not exist in array fail the test",
									"//     pm.test(\"Bundles array not found in the response\", () => {",
									"//         pm.expect(responseBody.bundles).to.exist;",
									"//     })",
									"// }",
									"",
									"var responseBody = pm.response.json();",
									"",
									"//Flag to track if at least one bundle with 'unlimited' property true is found",
									"var unlimitedFound = false;",
									"",
									"//check if bundle array exists in the response",
									"if(responseBody.bundles) {",
									"    //iterate over each bundles in array",
									"    responseBody.bundles.forEach(function(bundle){",
									"        //if'unlimted' is true for any bundle,set the flag to true",
									"        if(bundle.unlimited===true){",
									"            unlimitedFound = true;",
									"        }",
									"    });",
									"}else {",
									"    //if bundles array does not exists, fail the test",
									"    pm.test(\"Bundles array not found in the response\", () => {",
									"        pm.expect(responseBody.bundles).to.exist;",
									"    })",
									"}",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/catalogue?group={{group}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"catalogue"
							],
							"query": [
								{
									"key": "page",
									"value": "",
									"disabled": true
								},
								{
									"key": "perPage",
									"value": "",
									"disabled": true
								},
								{
									"key": "direction",
									"value": "",
									"disabled": true
								},
								{
									"key": "orderBy",
									"value": "",
									"disabled": true
								},
								{
									"key": "description",
									"value": "",
									"disabled": true
								},
								{
									"key": "countries",
									"value": "",
									"disabled": true
								},
								{
									"key": "region",
									"value": "",
									"disabled": true
								},
								{
									"key": "group",
									"value": "{{group}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ListCatalogueByCountries",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test to check status",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"var responseBody = pm.response.json();                                                                                                                         ",
									"var c1 = pm.collectionVariables.get(\"country\");",
									"",
									"pm.test(\"Verify country\" , () => {",
									"    _.each(responseBody.bundles, function(bundle){",
									"        _.each(bundle.countries, function (country) {",
									"            pm.expect(country.iso).to.equal(c1);",
									"        });",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/catalogue?countries={{country}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"catalogue"
							],
							"query": [
								{
									"key": "page",
									"value": "",
									"disabled": true
								},
								{
									"key": "perPage",
									"value": "",
									"disabled": true
								},
								{
									"key": "direction",
									"value": "",
									"disabled": true
								},
								{
									"key": "orderBy",
									"value": "",
									"disabled": true
								},
								{
									"key": "description",
									"value": "",
									"disabled": true
								},
								{
									"key": "group",
									"value": "",
									"disabled": true
								},
								{
									"key": "countries",
									"value": "{{country}}"
								},
								{
									"key": "region",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ListCatalogueByRegion",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test to check status",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"var responseBody = pm.response.json();                                                                                                                               ",
									"",
									"var region = pm.collectionVariables.get(\"region\");",
									"pm.test(\"Verify region\" , () => {",
									"    _.each(responseBody.bundles, function(bundle){",
									"        _.each(bundle.countries, function (country) {",
									"            pm.expect(country.region).to.equal (region);",
									"        });",
									"    });",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/catalogue?region={{region}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"catalogue"
							],
							"query": [
								{
									"key": "page",
									"value": "",
									"disabled": true
								},
								{
									"key": "perPage",
									"value": "",
									"disabled": true
								},
								{
									"key": "direction",
									"value": "",
									"disabled": true
								},
								{
									"key": "orderBy",
									"value": "",
									"disabled": true
								},
								{
									"key": "description",
									"value": "",
									"disabled": true
								},
								{
									"key": "group",
									"value": "",
									"disabled": true
								},
								{
									"key": "countries",
									"value": "",
									"disabled": true
								},
								{
									"key": "region",
									"value": "{{region}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ListCatalogueByRegionAndCountries",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test to check status",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var country1 = pm.collectionVariables.get(\"country\");",
									"var region2 = pm.collectionVariables.get(\"region2\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/catalogue?region={{region2}}&countries={{country-code}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"catalogue"
							],
							"query": [
								{
									"key": "page",
									"value": "",
									"disabled": true
								},
								{
									"key": "perPage",
									"value": "",
									"disabled": true
								},
								{
									"key": "direction",
									"value": "",
									"disabled": true
								},
								{
									"key": "orderBy",
									"value": "",
									"disabled": true
								},
								{
									"key": "description",
									"value": "",
									"disabled": true
								},
								{
									"key": "group",
									"value": "",
									"disabled": true
								},
								{
									"key": "region",
									"value": "{{region2}}"
								},
								{
									"key": "countries",
									"value": "{{country-code}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ListCatalogueByPageNoPerPageDirectionOrderByRegion",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {",
									"  \"properties\": {",
									"    \"bundles\": {",
									"      \"type\": \"array\",",
									"      \"items\": [",
									"        {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"name\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"description\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"countries\": {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"region\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iso\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"region\",",
									"                    \"iso\"",
									"                  ]",
									"                }",
									"              ]",
									"            },",
									"            \"dataAmount\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"duration\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"speed\": {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"string\"",
									"                },",
									"                {",
									"                  \"type\": \"string\"",
									"                },",
									"                {",
									"                  \"type\": \"string\"",
									"                }",
									"              ]",
									"            },",
									"            \"autostart\": {",
									"              \"type\": \"boolean\"",
									"            },",
									"            \"unlimited\": {",
									"              \"type\": \"boolean\"",
									"            },",
									"            \"roamingEnabled\": {",
									"              \"type\": \"array\",",
									"              \"items\": {}",
									"            },",
									"            \"imageUrl\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"price\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"groups\": {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"string\"",
									"                }",
									"              ]",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"name\",",
									"            \"description\",",
									"            \"countries\",",
									"            \"dataAmount\",",
									"            \"duration\",",
									"            \"speed\",",
									"            \"autostart\",",
									"            \"unlimited\",",
									"            \"roamingEnabled\",",
									"            \"imageUrl\",",
									"            \"price\",",
									"            \"groups\"",
									"          ]",
									"        }",
									"      ]",
									"    },",
									"    \"pageCount\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"rows\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"pageSize\": {",
									"      \"type\": \"integer\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"bundles\",",
									"    \"pageCount\",",
									"    \"rows\",",
									"    \"pageSize\"",
									"  ]",
									"}",
									"",
									"",
									"//Test to check status",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"//Test to check JSON data format",
									"pm.test(\"Response contains valid JSON data\", ()=>{",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Assert that data is in Ascending order",
									"pm.test(\"Data is in ascending order\", () => {",
									"    var jsonData= pm.response.json();",
									"    var bundles = jsonData.bundles;",
									"    var bundles1 = bundles.sort();",
									"    pm.expect(bundles).to.eql(bundles1);",
									"})",
									"",
									"var responseBody = pm.response.json();                                                                                                                               ",
									"",
									"var region = pm.collectionVariables.get(\"region\");",
									"pm.test(\"Verify region is Middle east\" , () => {",
									"    _.each(responseBody.bundles, function(bundle){",
									"        _.each(bundle.countries, function (country) {",
									"            pm.expect(country.region).to.equal (region);",
									"        });",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"region\", \"Middle East\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/catalogue?page={{pageNo}}&perPage={{perPage}}&direction={{direction}}&orderBy={{OrderBy}}&region={{region}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"catalogue"
							],
							"query": [
								{
									"key": "page",
									"value": "{{pageNo}}"
								},
								{
									"key": "perPage",
									"value": "{{perPage}}"
								},
								{
									"key": "direction",
									"value": "{{direction}}"
								},
								{
									"key": "orderBy",
									"value": "{{OrderBy}}"
								},
								{
									"key": "description",
									"value": "{{description}}",
									"disabled": true
								},
								{
									"key": "group",
									"value": "",
									"disabled": true
								},
								{
									"key": "countries",
									"value": "",
									"disabled": true
								},
								{
									"key": "region",
									"value": "{{region}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List catalogue(Fail) Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test to check status",
									"pm.test(\"Response status code is 403\", function () {",
									"  pm.response.to.have.status(403);",
									"});",
									"",
									"",
									"//Check if response body is correct",
									"pm.test(\"Response Body is correct\", function () {",
									"    pm.response.to.have.body(\"{\\\"message\\\":\\\"access denied\\\"}\");",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY-FAIL}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/catalogue",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"catalogue"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get Bundle from catalogue",
			"item": [
				{
					"name": "Get Bundle from catalogue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is in JSON format\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
									"});",
									"",
									"pm.test(\"Response has name, description, dataAmount, duration, imageUrl, and price properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('description');",
									"    pm.expect(jsonData).to.have.property('dataAmount');",
									"    pm.expect(jsonData).to.have.property('duration');",
									"    pm.expect(jsonData).to.have.property('imageUrl');",
									"    pm.expect(jsonData).to.have.property('price');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/catalogue/bundle/{{bundlename}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"catalogue",
								"bundle",
								"{{bundlename}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Bundle from catalogue(Fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"let bundname = pm.collectionVariables.get(\"bundlename-na\");",
									"",
									"//Check if response body is correct",
									"pm.test(\"Response Body is correct\", function () {",
									"    pm.response.to.have.body(\"{\\\"message\\\":\\\"Bundle '\" + bundname + \"' not found\\\"}\");",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/catalogue/bundle/{{bundlename-na}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"catalogue",
								"bundle",
								"{{bundlename-na}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get Country network data",
			"item": [
				{
					"name": "Get Country Network Data (Specific Country)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"countryNetworks\": {",
									"      \"type\": \"array\",",
									"      \"items\": [",
									"        {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"name\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"networks\": {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"brandName\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"mcc\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"mnc\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"tagid\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"speed\": {",
									"                      \"type\": \"array\",",
									"                      \"items\": [",
									"                        {",
									"                          \"type\": \"string\"",
									"                        },",
									"                        {",
									"                          \"type\": \"string\"",
									"                        },",
									"                        {",
									"                          \"type\": \"string\"",
									"                        },",
									"                        {",
									"                          \"type\": \"string\"",
									"                        }",
									"                      ]",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"brandName\",",
									"                    \"mcc\",",
									"                    \"mnc\",",
									"                    \"tagid\",",
									"                    \"speed\"",
									"                  ]",
									"                }",
									"              ]",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"name\",",
									"            \"networks\"",
									"          ]",
									"        }",
									"      ]",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"countryNetworks\"",
									"  ]",
									"}",
									"",
									"//Response code is 200",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Test to check JSON data format",
									"pm.test(\"Response contains valid JSON data\", ()=>{",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/networks?countries={{country/countries}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"networks"
							],
							"query": [
								{
									"key": "countries",
									"value": "{{country/countries}}",
									"description": "Return network data by country"
								},
								{
									"key": "isos",
									"value": "{{iso's}}",
									"description": "Returns network data by ISOs",
									"disabled": true
								},
								{
									"key": "returnAll",
									"value": "",
									"description": "Returns all the network data",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Country Network Data (Specific Country) Fail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Check if response is 404",
									"pm.test(\"Response status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"let nacountry = pm.collectionVariables.get(\"country/countries-na\");",
									"",
									"//Check if response body is correct",
									"pm.test(\"Response Body is correct\", function () {",
									"    pm.response.to.have.body(\"{\\\"message\\\":\\\"No networks found for the provided countries [\" + nacountry + \"]\\\"}\");",
									"});",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/networks?countries={{country/countries-na}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"networks"
							],
							"query": [
								{
									"key": "countries",
									"value": "{{country/countries-na}}",
									"description": "Return network data by country"
								},
								{
									"key": "isos",
									"value": "{{iso's}}",
									"description": "Returns network data by ISOs",
									"disabled": true
								},
								{
									"key": "returnAll",
									"value": "",
									"description": "Returns all the network data",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Country Network Data (ReturnAll - true)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"countryNetworks\": {",
									"      \"type\": \"array\",",
									"      \"items\": [",
									"        {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"name\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"networks\": {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"brandName\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"mcc\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"mnc\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"tagid\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"speed\": {",
									"                      \"type\": \"array\",",
									"                      \"items\": [",
									"                        {",
									"                          \"type\": \"string\"",
									"                        },",
									"                        {",
									"                          \"type\": \"string\"",
									"                        },",
									"                        {",
									"                          \"type\": \"string\"",
									"                        },",
									"                        {",
									"                          \"type\": \"string\"",
									"                        }",
									"                      ]",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"brandName\",",
									"                    \"mcc\",",
									"                    \"mnc\",",
									"                    \"tagid\",",
									"                    \"speed\"",
									"                  ]",
									"                }",
									"              ]",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"name\",",
									"            \"networks\"",
									"          ]",
									"        }",
									"      ]",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"countryNetworks\"",
									"  ]",
									"}",
									"",
									"//Response code is 200",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Test to check JSON data format",
									"pm.test(\"Response contains valid JSON data\", ()=>{",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/networks?returnAll=true",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"networks"
							],
							"query": [
								{
									"key": "countries",
									"value": "{{country/countries}}",
									"description": "Return network data by country",
									"disabled": true
								},
								{
									"key": "isos",
									"value": "{{iso's}}",
									"description": "Returns network data by ISOs",
									"disabled": true
								},
								{
									"key": "returnAll",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Country Network Data (ReturnAll - false)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Check if response is 400",
									"pm.test(\"Response status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"//Check if response body is correct",
									"pm.test(\"Response Body is correct\", function () {",
									"    pm.response.to.have.body(\"{\\\"message\\\":\\\"either Country or ISO must be provided if not returning all countries\\\"}\");",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/networks?returnAll=false",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"networks"
							],
							"query": [
								{
									"key": "countries",
									"value": "{{country/countries}}",
									"description": "Return network data by country",
									"disabled": true
								},
								{
									"key": "isos",
									"value": "{{iso's}}",
									"description": "Returns network data by ISOs",
									"disabled": true
								},
								{
									"key": "returnAll",
									"value": "false",
									"description": "Returns all the network data"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Country Network Data (ISO)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"countryNetworks\": {",
									"      \"type\": \"array\",",
									"      \"items\": [",
									"        {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"name\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"networks\": {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"name\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"brandName\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"mcc\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"mnc\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"tagid\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"speed\": {",
									"                      \"type\": \"array\",",
									"                      \"items\": [",
									"                        {",
									"                          \"type\": \"string\"",
									"                        },",
									"                        {",
									"                          \"type\": \"string\"",
									"                        },",
									"                        {",
									"                          \"type\": \"string\"",
									"                        },",
									"                        {",
									"                          \"type\": \"string\"",
									"                        }",
									"                      ]",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"name\",",
									"                    \"brandName\",",
									"                    \"mcc\",",
									"                    \"mnc\",",
									"                    \"tagid\",",
									"                    \"speed\"",
									"                  ]",
									"                }",
									"              ]",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"name\",",
									"            \"networks\"",
									"          ]",
									"        }",
									"      ]",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"countryNetworks\"",
									"  ]",
									"}",
									"",
									"//Response code is 200",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Test to check JSON data format",
									"pm.test(\"Response contains valid JSON data\", ()=>{",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/networks?isos={{iso's}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"networks"
							],
							"query": [
								{
									"key": "countries",
									"value": "{{country/countries}}",
									"description": "Return network data by country",
									"disabled": true
								},
								{
									"key": "isos",
									"value": "{{iso's}}",
									"description": "Returns network data by ISOs"
								},
								{
									"key": "returnAll",
									"value": "{{returnAll(true/false)}}",
									"description": "Returns all the network data",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Country Network Data (ISO) Fail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Check if response is 404",
									"pm.test(\"Response status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"let naiso = pm.collectionVariables.get(\"iso's-na\");",
									"",
									"//Check if response body is correct",
									"pm.test(\"Response Body is correct\", function () {",
									"    pm.response.to.have.body(\"{\\\"message\\\":\\\"No networks found for the provided ISOs: [\" + naiso +\"]\\\"}\");",
									"});",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/networks?isos={{iso's-na}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"networks"
							],
							"query": [
								{
									"key": "countries",
									"value": "{{country/countries}}",
									"description": "Return network data by country",
									"disabled": true
								},
								{
									"key": "isos",
									"value": "{{iso's-na}}",
									"description": "Returns network data by ISOs"
								},
								{
									"key": "returnAll",
									"value": "",
									"description": "Returns all the network data",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get Organisation",
			"item": [
				{
					"name": "Get your Organisation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Response status code is 200",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Validate API key on the response",
									"pm.test(\"Validate API key on the API response\", ()=>{",
									"    const response = pm.response.json();",
									"    const apikey = pm.collectionVariables.get(\"API-KEY\");",
									"    pm.expect(response.organisations[0].apiKey).to.eql(apikey);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/organisation",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"organisation"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get your Organisation(Fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Response status code is 403",
									"pm.test(\"Response status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"//Check if response body is correct",
									"pm.test(\"Response Body is correct\", function () {",
									"    pm.response.to.have.body(\"{\\\"message\\\":\\\"access denied\\\"}\");",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY-FAIL}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/organisation",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"organisation"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get orders",
			"item": [
				{
					"name": "Get all orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"orders\": {",
									"      \"type\": \"array\",",
									"      \"items\": [",
									"        {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"order\": {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"type\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"item\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"quantity\": {",
									"                      \"type\": \"integer\"",
									"                    },",
									"                    \"subTotal\": {",
									"                      \"type\": \"integer\"",
									"                    },",
									"                    \"pricePerUnit\": {",
									"                      \"type\": \"integer\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"type\",",
									"                    \"item\",",
									"                    \"quantity\",",
									"                    \"subTotal\",",
									"                    \"pricePerUnit\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"type\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"item\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"quantity\": {",
									"                      \"type\": \"integer\"",
									"                    },",
									"                    \"subTotal\": {",
									"                      \"type\": \"number\"",
									"                    },",
									"                    \"pricePerUnit\": {",
									"                      \"type\": \"number\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"type\",",
									"                    \"item\",",
									"                    \"quantity\",",
									"                    \"subTotal\",",
									"                    \"pricePerUnit\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"type\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"item\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"quantity\": {",
									"                      \"type\": \"integer\"",
									"                    },",
									"                    \"subTotal\": {",
									"                      \"type\": \"number\"",
									"                    },",
									"                    \"pricePerUnit\": {",
									"                      \"type\": \"number\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"type\",",
									"                    \"item\",",
									"                    \"quantity\",",
									"                    \"subTotal\",",
									"                    \"pricePerUnit\"",
									"                  ]",
									"                }",
									"              ]",
									"            },",
									"            \"total\": {",
									"              \"type\": \"number\"",
									"            },",
									"            \"currency\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"status\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"statusMessage\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"orderReference\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"createdDate\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"runningBalance\": {",
									"              \"type\": \"integer\"",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"order\",",
									"            \"total\",",
									"            \"currency\",",
									"            \"status\",",
									"            \"statusMessage\",",
									"            \"orderReference\",",
									"            \"createdDate\",",
									"            \"runningBalance\"",
									"          ]",
									"        },",
									"        {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"order\": {",
									"              \"type\": \"null\"",
									"            },",
									"            \"total\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"status\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"statusMessage\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"orderReference\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"createdDate\": {",
									"              \"type\": \"string\"",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"order\",",
									"            \"total\",",
									"            \"status\",",
									"            \"statusMessage\",",
									"            \"orderReference\",",
									"            \"createdDate\"",
									"          ]",
									"        },",
									"        {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"order\": {",
									"              \"type\": \"null\"",
									"            },",
									"            \"total\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"status\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"statusMessage\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"orderReference\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"createdDate\": {",
									"              \"type\": \"string\"",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"order\",",
									"            \"total\",",
									"            \"status\",",
									"            \"statusMessage\",",
									"            \"orderReference\",",
									"            \"createdDate\"",
									"          ]",
									"        },",
									"        {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"order\": {",
									"              \"type\": \"null\"",
									"            },",
									"            \"total\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"status\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"statusMessage\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"orderReference\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"createdDate\": {",
									"              \"type\": \"string\"",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"order\",",
									"            \"total\",",
									"            \"status\",",
									"            \"statusMessage\",",
									"            \"orderReference\",",
									"            \"createdDate\"",
									"          ]",
									"        },",
									"        {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"order\": {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"type\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"item\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"quantity\": {",
									"                      \"type\": \"integer\"",
									"                    },",
									"                    \"subTotal\": {",
									"                      \"type\": \"integer\"",
									"                    },",
									"                    \"pricePerUnit\": {",
									"                      \"type\": \"integer\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"type\",",
									"                    \"item\",",
									"                    \"quantity\",",
									"                    \"subTotal\",",
									"                    \"pricePerUnit\"",
									"                  ]",
									"                }",
									"              ]",
									"            },",
									"            \"total\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"currency\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"status\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"statusMessage\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"orderReference\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"createdDate\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"runningBalance\": {",
									"              \"type\": \"number\"",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"order\",",
									"            \"total\",",
									"            \"currency\",",
									"            \"status\",",
									"            \"statusMessage\",",
									"            \"orderReference\",",
									"            \"createdDate\",",
									"            \"runningBalance\"",
									"          ]",
									"        },",
									"        {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"order\": {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"type\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"item\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"quantity\": {",
									"                      \"type\": \"integer\"",
									"                    },",
									"                    \"subTotal\": {",
									"                      \"type\": \"integer\"",
									"                    },",
									"                    \"pricePerUnit\": {",
									"                      \"type\": \"integer\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"type\",",
									"                    \"item\",",
									"                    \"quantity\",",
									"                    \"subTotal\",",
									"                    \"pricePerUnit\"",
									"                  ]",
									"                }",
									"              ]",
									"            },",
									"            \"total\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"currency\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"status\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"statusMessage\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"orderReference\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"createdDate\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"runningBalance\": {",
									"              \"type\": \"number\"",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"order\",",
									"            \"total\",",
									"            \"currency\",",
									"            \"status\",",
									"            \"statusMessage\",",
									"            \"orderReference\",",
									"            \"createdDate\",",
									"            \"runningBalance\"",
									"          ]",
									"        },",
									"        {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"order\": {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"type\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"item\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"quantity\": {",
									"                      \"type\": \"integer\"",
									"                    },",
									"                    \"subTotal\": {",
									"                      \"type\": \"number\"",
									"                    },",
									"                    \"pricePerUnit\": {",
									"                      \"type\": \"number\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"type\",",
									"                    \"item\",",
									"                    \"quantity\",",
									"                    \"subTotal\",",
									"                    \"pricePerUnit\"",
									"                  ]",
									"                }",
									"              ]",
									"            },",
									"            \"total\": {",
									"              \"type\": \"number\"",
									"            },",
									"            \"currency\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"status\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"statusMessage\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"orderReference\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"createdDate\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"runningBalance\": {",
									"              \"type\": \"number\"",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"order\",",
									"            \"total\",",
									"            \"currency\",",
									"            \"status\",",
									"            \"statusMessage\",",
									"            \"orderReference\",",
									"            \"createdDate\",",
									"            \"runningBalance\"",
									"          ]",
									"        },",
									"        {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"order\": {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"esims\": {",
									"                      \"type\": \"array\",",
									"                      \"items\": [",
									"                        {",
									"                          \"type\": \"object\",",
									"                          \"properties\": {",
									"                            \"iccid\": {",
									"                              \"type\": \"string\"",
									"                            },",
									"                            \"matchingId\": {",
									"                              \"type\": \"string\"",
									"                            },",
									"                            \"smdpAddress\": {",
									"                              \"type\": \"string\"",
									"                            }",
									"                          },",
									"                          \"required\": [",
									"                            \"iccid\",",
									"                            \"matchingId\",",
									"                            \"smdpAddress\"",
									"                          ]",
									"                        }",
									"                      ]",
									"                    },",
									"                    \"type\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"item\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iccids\": {",
									"                      \"type\": \"array\",",
									"                      \"items\": [",
									"                        {",
									"                          \"type\": \"string\"",
									"                        }",
									"                      ]",
									"                    },",
									"                    \"quantity\": {",
									"                      \"type\": \"integer\"",
									"                    },",
									"                    \"subTotal\": {",
									"                      \"type\": \"number\"",
									"                    },",
									"                    \"pricePerUnit\": {",
									"                      \"type\": \"number\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"esims\",",
									"                    \"type\",",
									"                    \"item\",",
									"                    \"iccids\",",
									"                    \"quantity\",",
									"                    \"subTotal\",",
									"                    \"pricePerUnit\"",
									"                  ]",
									"                },",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"esims\": {",
									"                      \"type\": \"array\",",
									"                      \"items\": [",
									"                        {",
									"                          \"type\": \"object\",",
									"                          \"properties\": {",
									"                            \"iccid\": {",
									"                              \"type\": \"string\"",
									"                            },",
									"                            \"matchingId\": {",
									"                              \"type\": \"string\"",
									"                            },",
									"                            \"smdpAddress\": {",
									"                              \"type\": \"string\"",
									"                            }",
									"                          },",
									"                          \"required\": [",
									"                            \"iccid\",",
									"                            \"matchingId\",",
									"                            \"smdpAddress\"",
									"                          ]",
									"                        }",
									"                      ]",
									"                    },",
									"                    \"type\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"item\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iccids\": {",
									"                      \"type\": \"array\",",
									"                      \"items\": [",
									"                        {",
									"                          \"type\": \"string\"",
									"                        }",
									"                      ]",
									"                    },",
									"                    \"quantity\": {",
									"                      \"type\": \"integer\"",
									"                    },",
									"                    \"subTotal\": {",
									"                      \"type\": \"number\"",
									"                    },",
									"                    \"pricePerUnit\": {",
									"                      \"type\": \"number\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"esims\",",
									"                    \"type\",",
									"                    \"item\",",
									"                    \"iccids\",",
									"                    \"quantity\",",
									"                    \"subTotal\",",
									"                    \"pricePerUnit\"",
									"                  ]",
									"                }",
									"              ]",
									"            },",
									"            \"total\": {",
									"              \"type\": \"number\"",
									"            },",
									"            \"currency\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"status\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"statusMessage\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"orderReference\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"createdDate\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"assigned\": {",
									"              \"type\": \"boolean\"",
									"            },",
									"            \"runningBalance\": {",
									"              \"type\": \"number\"",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"order\",",
									"            \"total\",",
									"            \"currency\",",
									"            \"status\",",
									"            \"statusMessage\",",
									"            \"orderReference\",",
									"            \"createdDate\",",
									"            \"assigned\",",
									"            \"runningBalance\"",
									"          ]",
									"        },",
									"        {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"order\": {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"esims\": {",
									"                      \"type\": \"array\",",
									"                      \"items\": [",
									"                        {",
									"                          \"type\": \"object\",",
									"                          \"properties\": {",
									"                            \"iccid\": {",
									"                              \"type\": \"string\"",
									"                            },",
									"                            \"matchingId\": {",
									"                              \"type\": \"string\"",
									"                            },",
									"                            \"smdpAddress\": {",
									"                              \"type\": \"string\"",
									"                            }",
									"                          },",
									"                          \"required\": [",
									"                            \"iccid\",",
									"                            \"matchingId\",",
									"                            \"smdpAddress\"",
									"                          ]",
									"                        }",
									"                      ]",
									"                    },",
									"                    \"type\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"item\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iccids\": {",
									"                      \"type\": \"array\",",
									"                      \"items\": [",
									"                        {",
									"                          \"type\": \"string\"",
									"                        }",
									"                      ]",
									"                    },",
									"                    \"quantity\": {",
									"                      \"type\": \"integer\"",
									"                    },",
									"                    \"subTotal\": {",
									"                      \"type\": \"number\"",
									"                    },",
									"                    \"pricePerUnit\": {",
									"                      \"type\": \"number\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"esims\",",
									"                    \"type\",",
									"                    \"item\",",
									"                    \"iccids\",",
									"                    \"quantity\",",
									"                    \"subTotal\",",
									"                    \"pricePerUnit\"",
									"                  ]",
									"                }",
									"              ]",
									"            },",
									"            \"total\": {",
									"              \"type\": \"number\"",
									"            },",
									"            \"currency\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"status\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"statusMessage\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"orderReference\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"createdDate\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"assigned\": {",
									"              \"type\": \"boolean\"",
									"            },",
									"            \"runningBalance\": {",
									"              \"type\": \"integer\"",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"order\",",
									"            \"total\",",
									"            \"currency\",",
									"            \"status\",",
									"            \"statusMessage\",",
									"            \"orderReference\",",
									"            \"createdDate\",",
									"            \"assigned\",",
									"            \"runningBalance\"",
									"          ]",
									"        },",
									"        {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"order\": {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"esims\": {",
									"                      \"type\": \"array\",",
									"                      \"items\": [",
									"                        {",
									"                          \"type\": \"object\",",
									"                          \"properties\": {",
									"                            \"iccid\": {",
									"                              \"type\": \"string\"",
									"                            },",
									"                            \"matchingId\": {",
									"                              \"type\": \"string\"",
									"                            },",
									"                            \"smdpAddress\": {",
									"                              \"type\": \"string\"",
									"                            }",
									"                          },",
									"                          \"required\": [",
									"                            \"iccid\",",
									"                            \"matchingId\",",
									"                            \"smdpAddress\"",
									"                          ]",
									"                        }",
									"                      ]",
									"                    },",
									"                    \"type\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"item\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"iccids\": {",
									"                      \"type\": \"array\",",
									"                      \"items\": [",
									"                        {",
									"                          \"type\": \"string\"",
									"                        }",
									"                      ]",
									"                    },",
									"                    \"quantity\": {",
									"                      \"type\": \"integer\"",
									"                    },",
									"                    \"subTotal\": {",
									"                      \"type\": \"number\"",
									"                    },",
									"                    \"pricePerUnit\": {",
									"                      \"type\": \"number\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"esims\",",
									"                    \"type\",",
									"                    \"item\",",
									"                    \"iccids\",",
									"                    \"quantity\",",
									"                    \"subTotal\",",
									"                    \"pricePerUnit\"",
									"                  ]",
									"                }",
									"              ]",
									"            },",
									"            \"total\": {",
									"              \"type\": \"number\"",
									"            },",
									"            \"currency\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"status\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"statusMessage\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"orderReference\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"createdDate\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"assigned\": {",
									"              \"type\": \"boolean\"",
									"            },",
									"            \"runningBalance\": {",
									"              \"type\": \"number\"",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"order\",",
									"            \"total\",",
									"            \"currency\",",
									"            \"status\",",
									"            \"statusMessage\",",
									"            \"orderReference\",",
									"            \"createdDate\",",
									"            \"assigned\",",
									"            \"runningBalance\"",
									"          ]",
									"        }",
									"      ]",
									"    },",
									"    \"pageCount\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"pageSize\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"rows\": {",
									"      \"type\": \"integer\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"orders\",",
									"    \"pageCount\",",
									"    \"pageSize\",",
									"    \"rows\"",
									"  ]",
									"}",
									"",
									"//Response code is 200",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"//Test to check JSON data format",
									"pm.test(\"Response contains valid JSON data\", ()=>{",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"const response = pm.response.json();",
									"let i = Math.floor((Math.random()*6));",
									"let or = response.orders[i].orderReference;",
									"pm.collectionVariables.set(\"orderReference\", or);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/orders",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get specific order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema ={",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"order\": {",
									"      \"type\": \"array\",",
									"      \"items\": [",
									"        {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"type\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"item\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"quantity\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"subTotal\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"pricePerUnit\": {",
									"              \"type\": \"integer\"",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"type\",",
									"            \"item\",",
									"            \"quantity\",",
									"            \"subTotal\",",
									"            \"pricePerUnit\"",
									"          ]",
									"        }",
									"      ]",
									"    },",
									"    \"total\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"currency\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"status\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"statusMessage\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"orderReference\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"createdDate\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"runningBalance\": {",
									"      \"type\": \"number\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"order\",",
									"    \"total\",",
									"    \"currency\",",
									"    \"status\",",
									"    \"statusMessage\",",
									"    \"orderReference\",",
									"    \"createdDate\",",
									"    \"runningBalance\"",
									"  ]",
									"}",
									"",
									"//Test to check status",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"//Test to check JSON data format",
									"pm.test(\"Response contains valid JSON data\", ()=>{",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"//Test to check orderReference",
									"pm.test(\"Response contains orderReference\", ()=>{",
									"    const response = pm.response.json();",
									"    let or = response.orderReference;",
									"    pm.expect(or).to.eql(pm.collectionVariables.get(\"orderReference\"));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/orders/{{orderReference}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"orders",
								"{{orderReference}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get specific order Fail - invalid API key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Response status code is 403",
									"pm.test(\"Response status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"//Check if response body is correct",
									"pm.test(\"Response Body is correct\", function () {",
									"    pm.response.to.have.body(\"{\\\"message\\\":\\\"access denied\\\"}\");",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY-FAIL}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/orders/{{orderReference}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"orders",
								"{{orderReference}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get specific order Fail - invalid order reference",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Check if response is 400",
									"pm.test(\"Response status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"//Check if response body is correct",
									"pm.test(\"Response Body is correct\", function () {",
									"    pm.response.to.have.body(\"{\\\"message\\\":\\\"Invalid order reference\\\"}\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/orders/{{orderReference-na}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"orders",
								"{{orderReference-na}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get your Organisation's inventory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"bundles\": {",
									"      \"type\": \"array\",",
									"      \"items\": [",
									"        {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"name\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"desc\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"available\": {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"id\": {",
									"                      \"type\": \"integer\"",
									"                    },",
									"                    \"total\": {",
									"                      \"type\": \"integer\"",
									"                    },",
									"                    \"remaining\": {",
									"                      \"type\": \"integer\"",
									"                    },",
									"                    \"expiry\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"id\",",
									"                    \"total\",",
									"                    \"remaining\",",
									"                    \"expiry\"",
									"                  ]",
									"                }",
									"              ]",
									"            },",
									"            \"countries\": {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"string\"",
									"                }",
									"              ]",
									"            },",
									"            \"data\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"duration\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"durationUnit\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"autostart\": {",
									"              \"type\": \"boolean\"",
									"            },",
									"            \"speed\": {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"string\"",
									"                },",
									"                {",
									"                  \"type\": \"string\"",
									"                },",
									"                {",
									"                  \"type\": \"string\"",
									"                },",
									"                {",
									"                  \"type\": \"string\"",
									"                }",
									"              ]",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"name\",",
									"            \"desc\",",
									"            \"available\",",
									"            \"countries\",",
									"            \"data\",",
									"            \"duration\",",
									"            \"durationUnit\",",
									"            \"autostart\",",
									"            \"speed\"",
									"          ]",
									"        }",
									"      ]",
									"    },",
									"    \"pageSize\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"pageCount\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"rows\": {",
									"      \"type\": \"integer\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"bundles\",",
									"    \"pageSize\",",
									"    \"pageCount\",",
									"    \"rows\"",
									"  ]",
									"}",
									"",
									"//Test to check status",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"//Test to check JSON data format",
									"pm.test(\"Response contains valid JSON data\", ()=>{",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/inventory",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"inventory"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Top Up Crossover Regression - Org",
			"item": [
				{
					"name": "Process orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Check status is 400",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"//Check response body message",
									"pm.test(\"Response Body is correct\", function () {",
									"    pm.response.to.have.body(\"{\\\"message\\\":\\\"Incompatible bundle profile combination\\\"}\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY-DYN}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"type\": \"transaction\",\n  \"assign\": true,\n  \"Order\": [\n    {\n      \"type\": \"bundle\",\n      \"quantity\": 1,\n      \"item\": \"{{bundlename-bics}}\",\n      \"iccids\": [\n        \"{{iccid-hutch}}\"\n      ]\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/orders",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Process orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Check status is 400",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"//Check response body message",
									"pm.test(\"Response Body is correct\", function () {",
									"    pm.response.to.have.body(\"{\\\"message\\\":\\\"Incompatible bundle profile combination\\\"}\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY-DYN}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"type\": \"transaction\",\n  \"assign\": true,\n  \"Order\": [\n    {\n      \"type\": \"bundle\",\n      \"quantity\": 1,\n      \"item\": \"{{bundlename-bics}}\",\n      \"iccids\": [\n        \"{{iccid-proximus}}\"\n      ]\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/orders",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Process orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Check status is 400",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"//Check response body message",
									"pm.test(\"Response Body is correct\", function () {",
									"    pm.response.to.have.body(\"{\\\"message\\\":\\\"Incompatible bundle profile combination\\\"}\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY-DYN}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"type\": \"transaction\",\n  \"assign\": true,\n  \"Order\": [\n    {\n      \"type\": \"bundle\",\n      \"quantity\": 1,\n      \"item\": \"{{bundlename-proximus}}\",\n      \"iccids\": [\n        \"{{iccid-bics}}\"\n      ]\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/orders",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Process orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Check status is 400",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"//Check response body message",
									"pm.test(\"Response Body is correct\", function () {",
									"    pm.response.to.have.body(\"{\\\"message\\\":\\\"Incompatible bundle profile combination\\\"}\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY-DYN}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"type\": \"transaction\",\n  \"assign\": true,\n  \"Order\": [\n    {\n      \"type\": \"bundle\",\n      \"quantity\": 1,\n      \"item\": \"{{bundlename-proximus}}\",\n      \"iccids\": [\n        \"{{iccid-hutch}}\"\n      ]\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/orders",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Process orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Check status is 400",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"//Check response body message",
									"pm.test(\"Response Body is correct\", function () {",
									"    pm.response.to.have.body(\"{\\\"message\\\":\\\"Incompatible bundle profile combination\\\"}\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY-DYN}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"type\": \"transaction\",\n  \"assign\": true,\n  \"Order\": [\n    {\n      \"type\": \"bundle\",\n      \"quantity\": 1,\n      \"item\": \"{{bundlename-hutch}}\",\n      \"iccids\": [\n        \"{{iccid-proximus}}\"\n      ]\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/orders",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Process orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Check status is 400",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"//Check response body message",
									"pm.test(\"Response Body is correct\", function () {",
									"    pm.response.to.have.body(\"{\\\"message\\\":\\\"Incompatible bundle profile combination\\\"}\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY-DYN}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"type\": \"transaction\",\n  \"assign\": true,\n  \"Order\": [\n    {\n      \"type\": \"bundle\",\n      \"quantity\": 1,\n      \"item\": \"{{bundlename-hutch}}\",\n      \"iccids\": [\n        \"{{iccid-bics}}\"\n      ]\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/orders",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Top Up Regression Quantity- Org",
			"item": [
				{
					"name": "Process orders (quant more than inv)- hutch",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Check status is 400",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"//Check response body message",
									"pm.test(\"Response Body is correct\", function () {",
									"    pm.response.to.have.body(\"{\\\"message\\\":\\\"Failed to process Order. No payment taken.\\\"}\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY-DYN}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"type\": \"transaction\",\n  \"assign\": true,\n  \"Order\": [\n    {\n      \"type\": \"bundle\",\n      \"quantity\": 50,\n      \"item\": \"{{bundlename-hutch}}\",\n      \"iccids\": [\n        \"{{iccid-hutch}}\"\n      ]\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/orders",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Process orders (quant more than inv)- bics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Check status is 400",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"//Check response body message",
									"pm.test(\"Response Body is correct\", function () {",
									"    pm.response.to.have.body(\"{\\\"message\\\":\\\"Failed to process Order. No payment taken.\\\"}\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY-DYN}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"type\": \"transaction\",\n  \"assign\": true,\n  \"Order\": [\n    {\n      \"type\": \"bundle\",\n      \"quantity\": 50,\n      \"item\": \"{{bundlename-bics}}\",\n      \"iccids\": [\n        \"{{iccid-bics}}\"\n      ]\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/orders",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Process orders (quant more than inv)- proximus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Check status is 400",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"//Check response body message",
									"pm.test(\"Response Body is correct\", function () {",
									"    pm.response.to.have.body(\"{\\\"message\\\":\\\"Failed to process Order. No payment taken.\\\"}\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY-DYN}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"type\": \"transaction\",\n  \"assign\": true,\n  \"Order\": [\n    {\n      \"type\": \"bundle\",\n      \"quantity\": 50,\n      \"item\": \"{{bundlename-proximus}}\",\n      \"iccids\": [\n        \"{{iccid-proximus}}\"\n      ]\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/orders",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Top Up Regression- Org",
			"item": [
				{
					"name": "Process orders - hutch",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"order\": {",
									"      \"type\": \"array\",",
									"      \"items\": [",
									"        {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"esims\": {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"iccid\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"matchingId\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"smdpAddress\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"iccid\",",
									"                    \"matchingId\",",
									"                    \"smdpAddress\"",
									"                  ]",
									"                }",
									"              ]",
									"            },",
									"            \"type\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"item\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"iccids\": {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"string\"",
									"                }",
									"              ]",
									"            },",
									"            \"quantity\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"subTotal\": {",
									"              \"type\": \"number\"",
									"            },",
									"            \"pricePerUnit\": {",
									"              \"type\": \"number\"",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"esims\",",
									"            \"type\",",
									"            \"item\",",
									"            \"iccids\",",
									"            \"quantity\",",
									"            \"subTotal\",",
									"            \"pricePerUnit\"",
									"          ]",
									"        }",
									"      ]",
									"    },",
									"    \"total\": {",
									"      \"type\": \"number\"",
									"    },",
									"    \"currency\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"status\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"statusMessage\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"orderReference\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"createdDate\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"assigned\": {",
									"      \"type\": \"boolean\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"order\",",
									"    \"total\",",
									"    \"currency\",",
									"    \"status\",",
									"    \"statusMessage\",",
									"    \"orderReference\",",
									"    \"createdDate\",",
									"    \"assigned\"",
									"  ]",
									"}",
									"",
									"//Check status is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Test to check response format",
									"pm.test('Response contains valid JSON data', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY-DYN}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"type\": \"transaction\",\n  \"assign\": true,\n  \"Order\": [\n    {\n      \"type\": \"bundle\",\n      \"quantity\": 1,\n      \"item\": \"{{bundlename-hutch}}\",\n      \"iccids\": [\n        \"{{iccid-hutch}}\"\n      ]\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/orders",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Process orders - bics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"order\": {",
									"      \"type\": \"array\",",
									"      \"items\": [",
									"        {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"esims\": {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"iccid\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"matchingId\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"smdpAddress\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"iccid\",",
									"                    \"matchingId\",",
									"                    \"smdpAddress\"",
									"                  ]",
									"                }",
									"              ]",
									"            },",
									"            \"type\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"item\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"iccids\": {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"string\"",
									"                }",
									"              ]",
									"            },",
									"            \"quantity\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"subTotal\": {",
									"              \"type\": \"number\"",
									"            },",
									"            \"pricePerUnit\": {",
									"              \"type\": \"number\"",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"esims\",",
									"            \"type\",",
									"            \"item\",",
									"            \"iccids\",",
									"            \"quantity\",",
									"            \"subTotal\",",
									"            \"pricePerUnit\"",
									"          ]",
									"        }",
									"      ]",
									"    },",
									"    \"total\": {",
									"      \"type\": \"number\"",
									"    },",
									"    \"currency\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"status\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"statusMessage\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"orderReference\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"createdDate\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"assigned\": {",
									"      \"type\": \"boolean\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"order\",",
									"    \"total\",",
									"    \"currency\",",
									"    \"status\",",
									"    \"statusMessage\",",
									"    \"orderReference\",",
									"    \"createdDate\",",
									"    \"assigned\"",
									"  ]",
									"}",
									"",
									"//Check status is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Test to check response format",
									"pm.test('Response contains valid JSON data', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY-DYN}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"type\": \"transaction\",\n  \"assign\": true,\n  \"Order\": [\n    {\n      \"type\": \"bundle\",\n      \"quantity\": 1,\n      \"item\": \"{{bundlename-bics}}\",\n      \"iccids\": [\n        \"{{iccid-bics}}\"\n      ]\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/orders",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Process orders - proximus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"order\": {",
									"      \"type\": \"array\",",
									"      \"items\": [",
									"        {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"esims\": {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"iccid\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"matchingId\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"smdpAddress\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"iccid\",",
									"                    \"matchingId\",",
									"                    \"smdpAddress\"",
									"                  ]",
									"                }",
									"              ]",
									"            },",
									"            \"type\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"item\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"iccids\": {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"string\"",
									"                }",
									"              ]",
									"            },",
									"            \"quantity\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"subTotal\": {",
									"              \"type\": \"number\"",
									"            },",
									"            \"pricePerUnit\": {",
									"              \"type\": \"number\"",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"esims\",",
									"            \"type\",",
									"            \"item\",",
									"            \"iccids\",",
									"            \"quantity\",",
									"            \"subTotal\",",
									"            \"pricePerUnit\"",
									"          ]",
									"        }",
									"      ]",
									"    },",
									"    \"total\": {",
									"      \"type\": \"number\"",
									"    },",
									"    \"currency\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"status\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"statusMessage\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"orderReference\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"createdDate\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"assigned\": {",
									"      \"type\": \"boolean\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"order\",",
									"    \"total\",",
									"    \"currency\",",
									"    \"status\",",
									"    \"statusMessage\",",
									"    \"orderReference\",",
									"    \"createdDate\",",
									"    \"assigned\"",
									"  ]",
									"}",
									"",
									"//Check status is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"//Test to check response format",
									"pm.test('Response contains valid JSON data', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY-DYN}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"type\": \"transaction\",\n  \"assign\": true,\n  \"Order\": [\n    {\n      \"type\": \"bundle\",\n      \"quantity\": 1,\n      \"item\": \"{{bundlename-proximus}}\",\n      \"iccids\": [\n        \"{{iccid-proximus}}\"\n      ]\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/orders",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "List Bundles applied to an eSIM (Get assign id) Hutch",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"bundles\": {",
									"      \"type\": \"array\",",
									"      \"items\": [",
									"        {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"name\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"description\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"assignments\": {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"id\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"callTypeGroup\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"initialQuantity\": {",
									"                      \"type\": \"integer\"",
									"                    },",
									"                    \"remainingQuantity\": {",
									"                      \"type\": \"integer\"",
									"                    },",
									"                    \"assignmentDateTime\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"assignmentReference\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"bundleState\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"id\",",
									"                    \"callTypeGroup\",",
									"                    \"initialQuantity\",",
									"                    \"remainingQuantity\",",
									"                    \"assignmentDateTime\",",
									"                    \"assignmentReference\",",
									"                    \"bundleState\"",
									"                  ]",
									"                }",
									"              ]",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"name\",",
									"            \"description\",",
									"            \"assignments\"",
									"          ]",
									"        }",
									"      ]",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"bundles\"",
									"  ]",
									"}",
									"",
									"//Test to check response of endpoint",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"//Test to check the format of JSON data is as expected",
									"pm.test(\"Response contains valid JSON data\", ()=>{",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"//Test to check bundle assigned to esim",
									"",
									"// pm.test(\"Validate bundles assigned to the esim\", ()=>{",
									"//     const response = pm.response.json();",
									"//     pm.expect(response.bundles.name).to.eql(pm.collectionVariables.get(\"variable_key\"));",
									"",
									"// });",
									"",
									"const response = pm.response.json();",
									"pm.collectionVariables.set(\"assignid-hutch-org\",response.bundles[0].assignments[0].id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY-DYN}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/esims/{{iccid-hutch}}/bundles",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims",
								"{{iccid-hutch}}",
								"bundles"
							],
							"query": [
								{
									"key": "includeUsed",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List Bundles applied to an eSIM (Get assign id) BICs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"bundles\": {",
									"      \"type\": \"array\",",
									"      \"items\": [",
									"        {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"name\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"description\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"assignments\": {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"id\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"callTypeGroup\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"initialQuantity\": {",
									"                      \"type\": \"integer\"",
									"                    },",
									"                    \"remainingQuantity\": {",
									"                      \"type\": \"integer\"",
									"                    },",
									"                    \"assignmentDateTime\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"assignmentReference\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"bundleState\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"id\",",
									"                    \"callTypeGroup\",",
									"                    \"initialQuantity\",",
									"                    \"remainingQuantity\",",
									"                    \"assignmentDateTime\",",
									"                    \"assignmentReference\",",
									"                    \"bundleState\"",
									"                  ]",
									"                }",
									"              ]",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"name\",",
									"            \"description\",",
									"            \"assignments\"",
									"          ]",
									"        }",
									"      ]",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"bundles\"",
									"  ]",
									"}",
									"",
									"//Test to check response of endpoint",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"//Test to check the format of JSON data is as expected",
									"pm.test(\"Response contains valid JSON data\", ()=>{",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"//Test to check bundle assigned to esim",
									"",
									"// pm.test(\"Validate bundles assigned to the esim\", ()=>{",
									"//     const response = pm.response.json();",
									"//     pm.expect(response.bundles.name).to.eql(pm.collectionVariables.get(\"variable_key\"));",
									"",
									"// });",
									"",
									"const response = pm.response.json();",
									"pm.collectionVariables.set(\"assignid-bics-org\",response.bundles[0].assignments[0].id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY-DYN}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/esims/{{iccid-bics}}/bundles",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims",
								"{{iccid-bics}}",
								"bundles"
							],
							"query": [
								{
									"key": "includeUsed",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List Bundles applied to an eSIM (Get assign id) proximus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"bundles\": {",
									"      \"type\": \"array\",",
									"      \"items\": [",
									"        {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"name\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"description\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"assignments\": {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"id\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"callTypeGroup\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"initialQuantity\": {",
									"                      \"type\": \"integer\"",
									"                    },",
									"                    \"remainingQuantity\": {",
									"                      \"type\": \"integer\"",
									"                    },",
									"                    \"assignmentDateTime\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"assignmentReference\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"bundleState\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"id\",",
									"                    \"callTypeGroup\",",
									"                    \"initialQuantity\",",
									"                    \"remainingQuantity\",",
									"                    \"assignmentDateTime\",",
									"                    \"assignmentReference\",",
									"                    \"bundleState\"",
									"                  ]",
									"                }",
									"              ]",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"name\",",
									"            \"description\",",
									"            \"assignments\"",
									"          ]",
									"        }",
									"      ]",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"bundles\"",
									"  ]",
									"}",
									"",
									"//Test to check response of endpoint",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"//Test to check the format of JSON data is as expected",
									"pm.test(\"Response contains valid JSON data\", ()=>{",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"//Test to check bundle assigned to esim",
									"",
									"// pm.test(\"Validate bundles assigned to the esim\", ()=>{",
									"//     const response = pm.response.json();",
									"//     pm.expect(response.bundles.name).to.eql(pm.collectionVariables.get(\"variable_key\"));",
									"",
									"// });",
									"",
									"const response = pm.response.json();",
									"pm.collectionVariables.set(\"assignid-proximus-org\",response.bundles[0].assignments[0].id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY-DYN}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/esims/{{iccid-proximus}}/bundles",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims",
								"{{iccid-proximus}}",
								"bundles"
							],
							"query": [
								{
									"key": "includeUsed",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Revoke a specific Bundle Assignment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test to check status",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"//Response has the required success status",
									"pm.test(\"Response has the status as success\", function () {",
									"     pm.response.to.have.body(\"{\\\"status\\\":\\\"Successfully Revoked Bundle, bundle has been refunded to inventory\\\"}\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY-DYN}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/esims/{{iccid-hutch}}/bundles/{{bundlename-hutch}}/assignments/{{assignid-hutch-org}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims",
								"{{iccid-hutch}}",
								"bundles",
								"{{bundlename-hutch}}",
								"assignments",
								"{{assignid-hutch-org}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Revoke a specific Bundle Assignment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test to check status",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"//Response has the required success status",
									"pm.test(\"Response has the status as success\", function () {",
									"     pm.response.to.have.body(\"{\\\"status\\\":\\\"Successfully Revoked Bundle, bundle has been refunded to inventory\\\"}\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY-DYN}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/esims/{{iccid-bics}}/bundles/{{bundlename-bics}}/assignments/{{assignid-bics-org}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims",
								"{{iccid-bics}}",
								"bundles",
								"{{bundlename-bics}}",
								"assignments",
								"{{assignid-bics-org}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Revoke a specific Bundle Assignment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test to check status",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"//Response has the required success status",
									"pm.test(\"Response has the status as success\", function () {",
									"     pm.response.to.have.body(\"{\\\"status\\\":\\\"Successfully Revoked Bundle, bundle has been refunded to inventory\\\"}\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY-DYN}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/esims/{{iccid-proximus}}/bundles/{{bundlename-proximus}}/assignments/{{assignid-proximus-org}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"esims",
								"{{iccid-proximus}}",
								"bundles",
								"{{bundlename-proximus}}",
								"assignments",
								"{{assignid-proximus-org}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Process Bundle groups",
			"item": [
				{
					"name": "Refund a bundle usage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"bundles\": {",
									"      \"type\": \"array\",",
									"      \"items\": [",
									"        {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"name\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"desc\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"available\": {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"id\": {",
									"                      \"type\": \"integer\"",
									"                    },",
									"                    \"total\": {",
									"                      \"type\": \"integer\"",
									"                    },",
									"                    \"remaining\": {",
									"                      \"type\": \"integer\"",
									"                    },",
									"                    \"expiry\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"id\",",
									"                    \"total\",",
									"                    \"remaining\",",
									"                    \"expiry\"",
									"                  ]",
									"                }",
									"              ]",
									"            },",
									"            \"countries\": {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"string\"",
									"                }",
									"              ]",
									"            },",
									"            \"data\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"duration\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"durationUnit\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"autostart\": {",
									"              \"type\": \"boolean\"",
									"            },",
									"            \"speed\": {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"string\"",
									"                },",
									"                {",
									"                  \"type\": \"string\"",
									"                },",
									"                {",
									"                  \"type\": \"string\"",
									"                },",
									"                {",
									"                  \"type\": \"string\"",
									"                }",
									"              ]",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"name\",",
									"            \"desc\",",
									"            \"available\",",
									"            \"countries\",",
									"            \"data\",",
									"            \"duration\",",
									"            \"durationUnit\",",
									"            \"autostart\",",
									"            \"speed\"",
									"          ]",
									"        }",
									"      ]",
									"    },",
									"    \"pageSize\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"pageCount\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"rows\": {",
									"      \"type\": \"integer\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"bundles\",",
									"    \"pageSize\",",
									"    \"pageCount\",",
									"    \"rows\"",
									"  ]",
									"}",
									"",
									"//Test to check status",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"//Test to check JSON data format",
									"pm.test(\"Response contains valid JSON data\", ()=>{",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"const response = pm.response.json();",
									"",
									"let i = response.bundles[0].available.length",
									"let j = response.bundles[1].available.length",
									"let k = response.bundles[3].available.length",
									"",
									"let a = response.bundles[0].available[i-1].remaining;",
									"let b = response.bundles[1].available[j-1].remaining;",
									"let c = response.bundles[3].available[k-1].remaining;",
									"",
									"a=a+1;",
									"b=b+1;",
									"c=c+1;",
									"",
									"pm.collectionVariables.set(\"total-bics-add\", a);",
									"pm.collectionVariables.set(\"total-proximus-add\", b);",
									"pm.collectionVariables.set(\"total-hutch-add\", c);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY-DYN}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/inventory",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"inventory"
							]
						}
					},
					"response": []
				},
				{
					"name": "Process orders - hutch",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"order\": {",
									"      \"type\": \"array\",",
									"      \"items\": [",
									"        {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"type\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"item\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"quantity\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"subTotal\": {",
									"              \"type\": \"number\"",
									"            },",
									"            \"pricePerUnit\": {",
									"              \"type\": \"number\"",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"type\",",
									"            \"item\",",
									"            \"quantity\",",
									"            \"subTotal\",",
									"            \"pricePerUnit\"",
									"          ]",
									"        }",
									"      ]",
									"    },",
									"    \"total\": {",
									"      \"type\": \"number\"",
									"    },",
									"    \"currency\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"status\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"statusMessage\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"orderReference\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"createdDate\": {",
									"      \"type\": \"string\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"order\",",
									"    \"total\",",
									"    \"currency\",",
									"    \"status\",",
									"    \"statusMessage\",",
									"    \"orderReference\",",
									"    \"createdDate\"",
									"  ]",
									"}",
									"",
									"//Check status is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Test to check response format",
									"pm.test('Response contains valid JSON data', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY-DYN}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"type\": \"transaction\",\n  \"assign\": false,\n  \"Order\": [\n    {\n      \"type\": \"bundle\",\n      \"quantity\": 1,\n      \"item\": \"{{bundlename-hutch}}\",\n      \"iccids\": [\n      ]\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/orders",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Process orders - bics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"order\": {",
									"      \"type\": \"array\",",
									"      \"items\": [",
									"        {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"type\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"item\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"quantity\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"subTotal\": {",
									"              \"type\": \"number\"",
									"            },",
									"            \"pricePerUnit\": {",
									"              \"type\": \"number\"",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"type\",",
									"            \"item\",",
									"            \"quantity\",",
									"            \"subTotal\",",
									"            \"pricePerUnit\"",
									"          ]",
									"        }",
									"      ]",
									"    },",
									"    \"total\": {",
									"      \"type\": \"number\"",
									"    },",
									"    \"currency\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"status\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"statusMessage\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"orderReference\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"createdDate\": {",
									"      \"type\": \"string\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"order\",",
									"    \"total\",",
									"    \"currency\",",
									"    \"status\",",
									"    \"statusMessage\",",
									"    \"orderReference\",",
									"    \"createdDate\"",
									"  ]",
									"}",
									"",
									"//Check status is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Test to check response format",
									"pm.test('Response contains valid JSON data', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY-DYN}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"type\": \"transaction\",\n  \"assign\": false,\n  \"Order\": [\n    {\n      \"type\": \"bundle\",\n      \"quantity\": 1,\n      \"item\": \"{{bundlename-bics}}\",\n      \"iccids\": [\n      ]\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/orders",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Process orders - proximus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"order\": {",
									"      \"type\": \"array\",",
									"      \"items\": [",
									"        {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"type\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"item\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"quantity\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"subTotal\": {",
									"              \"type\": \"number\"",
									"            },",
									"            \"pricePerUnit\": {",
									"              \"type\": \"number\"",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"type\",",
									"            \"item\",",
									"            \"quantity\",",
									"            \"subTotal\",",
									"            \"pricePerUnit\"",
									"          ]",
									"        }",
									"      ]",
									"    },",
									"    \"total\": {",
									"      \"type\": \"number\"",
									"    },",
									"    \"currency\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"status\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"statusMessage\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"orderReference\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"createdDate\": {",
									"      \"type\": \"string\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"order\",",
									"    \"total\",",
									"    \"currency\",",
									"    \"status\",",
									"    \"statusMessage\",",
									"    \"orderReference\",",
									"    \"createdDate\"",
									"  ]",
									"}",
									"",
									"//Check status is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"//Test to check response format",
									"pm.test('Response contains valid JSON data', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY-DYN}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"type\": \"transaction\",\n  \"assign\": false,\n  \"Order\": [\n    {\n      \"type\": \"bundle\",\n      \"quantity\": 1,\n      \"item\": \"{{bundlename-proximus}}\",\n      \"iccids\": [\n      ]\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/orders",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Refund a bundle usage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"bundles\": {",
									"      \"type\": \"array\",",
									"      \"items\": [",
									"        {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"name\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"desc\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"available\": {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"id\": {",
									"                      \"type\": \"integer\"",
									"                    },",
									"                    \"total\": {",
									"                      \"type\": \"integer\"",
									"                    },",
									"                    \"remaining\": {",
									"                      \"type\": \"integer\"",
									"                    },",
									"                    \"expiry\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"id\",",
									"                    \"total\",",
									"                    \"remaining\",",
									"                    \"expiry\"",
									"                  ]",
									"                }",
									"              ]",
									"            },",
									"            \"countries\": {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"string\"",
									"                }",
									"              ]",
									"            },",
									"            \"data\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"duration\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"durationUnit\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"autostart\": {",
									"              \"type\": \"boolean\"",
									"            },",
									"            \"speed\": {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"string\"",
									"                },",
									"                {",
									"                  \"type\": \"string\"",
									"                },",
									"                {",
									"                  \"type\": \"string\"",
									"                },",
									"                {",
									"                  \"type\": \"string\"",
									"                }",
									"              ]",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"name\",",
									"            \"desc\",",
									"            \"available\",",
									"            \"countries\",",
									"            \"data\",",
									"            \"duration\",",
									"            \"durationUnit\",",
									"            \"autostart\",",
									"            \"speed\"",
									"          ]",
									"        }",
									"      ]",
									"    },",
									"    \"pageSize\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"pageCount\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"rows\": {",
									"      \"type\": \"integer\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"bundles\",",
									"    \"pageSize\",",
									"    \"pageCount\",",
									"    \"rows\"",
									"  ]",
									"}",
									"",
									"//Test to check status",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"//Test to check JSON data format",
									"pm.test(\"Response contains valid JSON data\", ()=>{",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"//Test to check refund ",
									"pm.test(\"Check refund\", ()=>{",
									"",
									"    const response = pm.response.json();",
									"",
									"    let i = response.bundles[0].available.length",
									"    let j = response.bundles[1].available.length",
									"    let k = response.bundles[3].available.length",
									"",
									"",
									"    let a = response.bundles[0].available[i-1].remaining;",
									"    let b = response.bundles[1].available[j-1].remaining;",
									"    let c = response.bundles[3].available[k-1].remaining;",
									"    ",
									"    pm.expect(a).to.eql(1);",
									"    pm.expect(b).to.eql(1);",
									"    pm.expect(c).to.eql(1);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY-DYN}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/inventory",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"inventory"
							]
						}
					},
					"response": []
				},
				{
					"name": "Refund a bundle usage - Invalid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//To be tested after clarifications"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"usageId\": {{id-na}},\n  \"quantity\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/inventory/refund",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"inventory",
								"refund"
							]
						}
					},
					"response": []
				},
				{
					"name": "Refund a bundle usage - Fail invalid API key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Response status code is 403",
									"pm.test(\"Response status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"//Check if response body is correct",
									"pm.test(\"Response Body is correct\", function () {",
									"    pm.response.to.have.body(\"{\\\"message\\\":\\\"access denied\\\"}\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY-FAIL}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"usageId\": {{id}},\n  \"quantity\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/inventory/refund",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"inventory",
								"refund"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Refund Bundle groups",
			"item": [
				{
					"name": "Refund a bundle usage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"bundles\": {",
									"      \"type\": \"array\",",
									"      \"items\": [",
									"        {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"name\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"desc\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"available\": {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"id\": {",
									"                      \"type\": \"integer\"",
									"                    },",
									"                    \"total\": {",
									"                      \"type\": \"integer\"",
									"                    },",
									"                    \"remaining\": {",
									"                      \"type\": \"integer\"",
									"                    },",
									"                    \"expiry\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"id\",",
									"                    \"total\",",
									"                    \"remaining\",",
									"                    \"expiry\"",
									"                  ]",
									"                }",
									"              ]",
									"            },",
									"            \"countries\": {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"string\"",
									"                }",
									"              ]",
									"            },",
									"            \"data\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"duration\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"durationUnit\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"autostart\": {",
									"              \"type\": \"boolean\"",
									"            },",
									"            \"speed\": {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"string\"",
									"                },",
									"                {",
									"                  \"type\": \"string\"",
									"                },",
									"                {",
									"                  \"type\": \"string\"",
									"                },",
									"                {",
									"                  \"type\": \"string\"",
									"                }",
									"              ]",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"name\",",
									"            \"desc\",",
									"            \"available\",",
									"            \"countries\",",
									"            \"data\",",
									"            \"duration\",",
									"            \"durationUnit\",",
									"            \"autostart\",",
									"            \"speed\"",
									"          ]",
									"        }",
									"      ]",
									"    },",
									"    \"pageSize\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"pageCount\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"rows\": {",
									"      \"type\": \"integer\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"bundles\",",
									"    \"pageSize\",",
									"    \"pageCount\",",
									"    \"rows\"",
									"  ]",
									"}",
									"",
									"//Test to check status",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"//Test to check JSON data format",
									"pm.test(\"Response contains valid JSON data\", ()=>{",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"const response = pm.response.json();",
									"",
									"",
									"let x = response.bundles[4].available[0].id;",
									"let y = response.bundles[3].available[0].id;",
									"let z = response.bundles[5].available[0].id;",
									"pm.collectionVariables.set(\"id-bics\", x);",
									"pm.collectionVariables.set(\"id-proximus\", y);",
									"pm.collectionVariables.set(\"id-hutch\", z);",
									"",
									"let a = response.bundles[4].available[0].remaining;",
									"let b = response.bundles[3].available[0].remaining;",
									"let c = response.bundles[5].available[0].remaining;",
									"a=a-1;",
									"b=b-1;",
									"c=c-1;",
									"",
									"pm.collectionVariables.set(\"total-bics\", a);",
									"pm.collectionVariables.set(\"total-proximus\", b);",
									"pm.collectionVariables.set(\"total-hutch\", c);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY-DYN}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/inventory",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"inventory"
							]
						}
					},
					"response": []
				},
				{
					"name": "Refund a bundle usage - bics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Response status code is 200",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Check if response body is correct",
									"pm.test(\"Response Body is correct\", function () {",
									"    pm.response.to.have.body(\"{\\\"status\\\":\\\"Successfully refunded bundles to balance\\\"}\");",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"usageId\": {{id-bics}},\n  \"quantity\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/inventory/refund",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"inventory",
								"refund"
							]
						}
					},
					"response": []
				},
				{
					"name": "Refund a bundle usage - proximus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Response status code is 200",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Check if response body is correct",
									"pm.test(\"Response Body is correct\", function () {",
									"    pm.response.to.have.body(\"{\\\"status\\\":\\\"Successfully refunded bundles to balance\\\"}\");",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"usageId\": {{id-proximus}},\n  \"quantity\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/inventory/refund",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"inventory",
								"refund"
							]
						}
					},
					"response": []
				},
				{
					"name": "Refund a bundle usage - hutch",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Response status code is 200",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Check if response body is correct",
									"pm.test(\"Response Body is correct\", function () {",
									"    pm.response.to.have.body(\"{\\\"status\\\":\\\"Successfully refunded bundles to balance\\\"}\");",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"usageId\": {{id-hutch}},\n  \"quantity\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/inventory/refund",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"inventory",
								"refund"
							]
						}
					},
					"response": []
				},
				{
					"name": "Refund a bundle usage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"bundles\": {",
									"      \"type\": \"array\",",
									"      \"items\": [",
									"        {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"name\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"desc\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"available\": {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"id\": {",
									"                      \"type\": \"integer\"",
									"                    },",
									"                    \"total\": {",
									"                      \"type\": \"integer\"",
									"                    },",
									"                    \"remaining\": {",
									"                      \"type\": \"integer\"",
									"                    },",
									"                    \"expiry\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"id\",",
									"                    \"total\",",
									"                    \"remaining\",",
									"                    \"expiry\"",
									"                  ]",
									"                }",
									"              ]",
									"            },",
									"            \"countries\": {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"string\"",
									"                }",
									"              ]",
									"            },",
									"            \"data\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"duration\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"durationUnit\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"autostart\": {",
									"              \"type\": \"boolean\"",
									"            },",
									"            \"speed\": {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"string\"",
									"                },",
									"                {",
									"                  \"type\": \"string\"",
									"                },",
									"                {",
									"                  \"type\": \"string\"",
									"                },",
									"                {",
									"                  \"type\": \"string\"",
									"                }",
									"              ]",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"name\",",
									"            \"desc\",",
									"            \"available\",",
									"            \"countries\",",
									"            \"data\",",
									"            \"duration\",",
									"            \"durationUnit\",",
									"            \"autostart\",",
									"            \"speed\"",
									"          ]",
									"        }",
									"      ]",
									"    },",
									"    \"pageSize\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"pageCount\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"rows\": {",
									"      \"type\": \"integer\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"bundles\",",
									"    \"pageSize\",",
									"    \"pageCount\",",
									"    \"rows\"",
									"  ]",
									"}",
									"",
									"//Test to check status",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"//Test to check JSON data format",
									"pm.test(\"Response contains valid JSON data\", ()=>{",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"//Test to check refund ",
									"pm.test(\"Check refund\", ()=>{",
									"",
									"    const response = pm.response.json();",
									"    let a = response.bundles[0].available[0].remaining;",
									"    let b = response.bundles[1].available[0].remaining;",
									"    let c = response.bundles[3].available[0].remaining;",
									"    ",
									"    pm.expect(a).to.eql(pm.collectionVariables.get(\"total-bics\"));",
									"    pm.expect(b).to.eql(pm.collectionVariables.get(\"total-proximus\"));",
									"    pm.expect(c).to.eql(pm.collectionVariables.get(\"total-hutch\"));",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY-DYN}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/inventory",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"inventory"
							]
						}
					},
					"response": []
				},
				{
					"name": "Refund a bundle usage - Invalid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//To be tested after clarifications"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"usageId\": {{id-na}},\n  \"quantity\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/inventory/refund",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"inventory",
								"refund"
							]
						}
					},
					"response": []
				},
				{
					"name": "Refund a bundle usage - Fail invalid API key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Response status code is 403",
									"pm.test(\"Response status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"//Check if response body is correct",
									"pm.test(\"Response Body is correct\", function () {",
									"    pm.response.to.have.body(\"{\\\"message\\\":\\\"access denied\\\"}\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY-FAIL}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"usageId\": {{id}},\n  \"quantity\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/inventory/refund",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"inventory",
								"refund"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "List Bundle Groups",
			"item": [
				{
					"name": "List Bundle Groups assigned to your Organisation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"groups\": {",
									"      \"type\": \"array\",",
									"      \"items\": [",
									"        {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"name\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"priceListUrl\": {",
									"              \"type\": \"string\"",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"name\",",
									"            \"priceListUrl\"",
									"          ]",
									"        }",
									"      ]",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"groups\"",
									"  ]",
									"}",
									"",
									"//Test to check status",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"//Test to check JSON data format",
									"pm.test(\"Response contains valid JSON data\", ()=>{",
									"    pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/organisation/groups",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"organisation",
								"groups"
							]
						}
					},
					"response": []
				},
				{
					"name": "List Bundle Groups assigned to your Organisation - Fail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Response status code is 403",
									"pm.test(\"Response status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"//Check if response body is correct",
									"pm.test(\"Response Body is correct\", function () {",
									"    pm.response.to.have.body(\"{\\\"message\\\":\\\"access denied\\\"}\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{API-KEY-FAIL}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/organisation/groups",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"organisation",
								"groups"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create Organisation",
			"item": []
		},
		{
			"name": "Organisation inventory",
			"item": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "API-KEY",
			"value": ""
		},
		{
			"key": "BaseURL",
			"value": "",
			"type": "string"
		},
		{
			"key": "API-KEY-FAIL",
			"value": "xxxxxxxxxxxxxxxxxxxxxxxxxxx"
		},
		{
			"key": "API-KEY-DYN",
			"value": "",
			"type": "string"
		},
		{
			"key": "geticcid0",
			"value": ""
		},
		{
			"key": "geticcid1",
			"value": ""
		},
		{
			"key": "geticcid2",
			"value": ""
		},
		{
			"key": "geticcid3",
			"value": ""
		},
		{
			"key": "geticcid4",
			"value": ""
		},
		{
			"key": "reference",
			"value": ""
		},
		{
			"key": "iccid-na",
			"value": "88888888888888888888"
		},
		{
			"key": "page",
			"value": "2"
		},
		{
			"key": "perPage",
			"value": "4"
		},
		{
			"key": "bundlename1",
			"value": "",
			"type": "string"
		},
		{
			"key": "bundlename2",
			"value": "",
			"type": "string"
		},
		{
			"key": "bundlename3",
			"value": "",
			"type": "string"
		},
		{
			"key": "bundlename-hutch",
			"value": "",
			"type": "string"
		},
		{
			"key": "bundlename-proximus",
			"value": "",
			"type": "string"
		},
		{
			"key": "bundlename-bics",
			"value": "",
			"type": "string"
		},
		{
			"key": "iccid-hutch",
			"value": "",
			"type": "string"
		},
		{
			"key": "iccid-proximus",
			"value": "",
			"type": "string"
		},
		{
			"key": "iccid-bics",
			"value": "",
			"type": "string"
		},
		{
			"key": "reference-bics",
			"value": ""
		},
		{
			"key": "orderReference",
			"value": ""
		},
		{
			"key": "id",
			"value": ""
		},
		{
			"key": "id-na",
			"value": "",
			"type": "string"
		},
		{
			"key": "iccid-appliedbundle",
			"value": ""
		},
		{
			"key": "assignid-bics",
			"value": ""
		},
		{
			"key": "assignid-proximus",
			"value": ""
		},
		{
			"key": "assignid-hutch",
			"value": ""
		},
		{
			"key": "iccid-bics-AA",
			"value": ""
		},
		{
			"key": "iccid-proximus-AA",
			"value": ""
		},
		{
			"key": "iccid-hutch-AA",
			"value": ""
		},
		{
			"key": "reference-proximus",
			"value": ""
		},
		{
			"key": "reference-hutch",
			"value": ""
		},
		{
			"key": "assignid-hutch-org",
			"value": ""
		},
		{
			"key": "assignid-bics-org",
			"value": ""
		},
		{
			"key": "assignid-proximus-org",
			"value": ""
		},
		{
			"key": "id-bics",
			"value": ""
		},
		{
			"key": "id-proximus",
			"value": ""
		},
		{
			"key": "id-hutch",
			"value": ""
		},
		{
			"key": "total-bics",
			"value": ""
		},
		{
			"key": "total-proximus",
			"value": ""
		},
		{
			"key": "total-hutch",
			"value": ""
		},
		{
			"key": "id-bics-add",
			"value": ""
		},
		{
			"key": "id-proximus-add",
			"value": ""
		},
		{
			"key": "id-hutch-add",
			"value": ""
		},
		{
			"key": "total-bics-add",
			"value": ""
		},
		{
			"key": "total-proximus-add",
			"value": ""
		},
		{
			"key": "total-hutch-add",
			"value": ""
		},
		{
			"key": "perPage-catalogue",
			"value": "7"
		},
		{
			"key": "bundlename",
			"value": "esim_1GB_AE_U"
		},
		{
			"key": "bundlename-na",
			"value": "esim_1GB_7D_GB_V2"
		},
		{
			"key": "pageNo",
			"value": "3"
		},
		{
			"key": "direction",
			"value": "asc"
		},
		{
			"key": "OrderBy",
			"value": "country"
		},
		{
			"key": "region",
			"value": "asia"
		},
		{
			"key": "description",
			"value": "desc"
		},
		{
			"key": "autostart",
			"value": "true"
		},
		{
			"key": "dataAmount",
			"value": ""
		},
		{
			"key": "country",
			"value": "United Arab Emirates"
		},
		{
			"key": "region2",
			"value": "Middle East"
		},
		{
			"key": "group",
			"value": "Standard eSIM Bundles"
		},
		{
			"key": "pageNo-invalid",
			"value": "2000"
		},
		{
			"key": "country-code",
			"value": "GB"
		},
		{
			"key": "perPage-invalid",
			"value": "-4"
		},
		{
			"key": "direction-invalid",
			"value": "fibonacci"
		},
		{
			"key": "reference-apple",
			"value": "27a919ad-e9a2-4103-b4ef-19d79d6c6235-1"
		},
		{
			"key": "assignment-id",
			"value": ""
		},
		{
			"key": "assignment-id-apple",
			"value": ""
		},
		{
			"key": "baseURL",
			"value": "",
			"type": "default"
		}
	]
}
